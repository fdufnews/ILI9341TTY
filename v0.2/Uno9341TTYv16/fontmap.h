#ifndef FONTMAP_H
#define FONTMAP_H

// This file is automatically generated, do not edit it,
// see ./prepare_fonts/README.md for more information.
#define  REPLACEMENT_CHARACTER (1)
#define  FIN {advance_cursor(1); return SUCCESS;}
#include "terminal_misc.h"
#include "TFT_macros.h"
#include "glyphcodes.h"
#include "combining_diacritics.h"
#include "softfonts.h"
#include "textgraphics.h"
int  handle_transform(unsigned int transform_code);
byte load_glyph_bitmap(unsigned int base_glyph);

////////////////////////////////////////////////////////////////////////////////
// Helper routines for transformations

// Mirror horizontally for even-width charactes
// Set nudge to 1 to reflect rightmost 5 pixels
void mirror_horizontal(byte nudge) {
  for (byte i=0; i<CH; i++) {
    // Specialized for 6-px wide fonts
    byte b = char_bitmap[i] & 0b111111;
    b >>= nudge;
    // 123456 -> 456123
    b = ((0b000111&b)<<3)|((0b111000&b)>>3);
    // 456123 -> 654321
    b = ((0b100100&b)>>2)|((0b001001&b)<<2)|(0b010010&b);
    char_bitmap[i] = b;
  }
}

// Flip rows in character bitmap
#define FLIP_CBM(a,b) {byte temp=char_bitmap[a]; char_bitmap[a]=char_bitmap[b]; char_bitmap[b]=temp;}
void mirror_vertical_helper(byte rstart, byte rstop) {
  byte i;
  for (i=rstart; i<=rstop; i++) FLIP_CBM(rstop-i,i);
  while (i<CH) char_bitmap[i++]=0;
}
// Flip vertically; Specialized for 12x6 fonts
// 01 2345678 9AB --> BA 9876543 210
#define mirror_vertical()           {mirror_vertical_helper(6,11);}
// Flip vertically for upper-case letters; Specialized for 12x6 fonts
// 01 2345678 9AB --> A9 8765432 10X
#define mirror_vertical_uppercase() {mirror_vertical_helper(6,10);}
// Flip lower-case letter vertically; Specialized for 12x6 fonts
// 01 23456 789AB --> 87 65432 10xxx
#define mirror_vertical_lowercase() {mirror_vertical_helper(5, 8);}

////////////////////////////////////////////////////////////////////////////////
// Binary search for codepoint index for sparsely-packed blocks
uint8_t binary_search(
  const byte i, 
  const byte nlist, 
  const byte *sorted_list) 
  {
  uint8_t lo = 0;
  uint8_t hi = nlist;
  //Serial.print("Low: "); //Serial.println(lo);
  //Serial.print("High: "); //Serial.println(hi);
  while (hi>lo) {
    uint8_t midpoint = (lo+hi)/2;
    unsigned int a = pgm_read_byte(&sorted_list[midpoint]);
    //Serial.print("Low: "); //Serial.println(lo);
    //Serial.print("High: "); //Serial.println(hi);
    //Serial.print("midpoint:  "); //Serial.println(midpoint);
    //Serial.print("a: "); //Serial.println(a);
    if      (i>a) lo=midpoint+1;
    else if (i<a) {
      if (midpoint) hi=midpoint-1;
      else return -1;
    }
    else return midpoint;
  }
  // Ran off beginning of list
  if (hi<lo) return (-1);
  // Handle high==low case: test and return if in range
  unsigned int a = pgm_read_byte(&sorted_list[lo]);
  if (i==a) return lo;
  return (-1);
}

////////////////////////////////////////////////////////////////////////////////
// Binary search for glyph group based on glyph index
int8_t binary_search_range(
  const unsigned int  i, 
  const byte          nlist, 
  const unsigned int *start_idxs, 
  const byte         *lengths)
  {
  int8_t lo = 0;
  int8_t hi = nlist;
  while (hi>lo) {
    int8_t midpoint = (lo+hi)/2;
    unsigned int a = pgm_read_word(&start_idxs[midpoint]);
    unsigned int b = pgm_read_byte(&lengths   [midpoint]) + a;
    if (i>=a) {
      if (i<b) return midpoint;
      lo=midpoint+1;
    }
    else hi=midpoint-1;
  }
  // Ran off beginning of list
  if (hi<lo) return (-1);
  // Handle high==low case: test and return if in range
  unsigned int a = pgm_read_word(&start_idxs[lo]);
  unsigned int b = pgm_read_byte(&lengths   [lo]) + a;
  if (i>=a && i<b) return lo;
  return (-1);
}
#define N_TRANSFORM_COMBINING (55)
static const byte modifier_transforms[N_TRANSFORM_COMBINING] PROGMEM = {
  COMBINING_GRAVE_ACCENT,
  COMBINING_ACUTE_ACCENT,
  COMBINING_CIRCUMFLEX_ACCENT,
  COMBINING_CIRCUMFLEX_ACCENT_BELOW,
  COMBINING_TILDE,
  COMBINING_MACRON,
  COMBINING_OVERLINE,
  COMBINING_BREVE,
  COMBINING_DOT_ABOVE,
  COMBINING_DIAERESIS,
  COMBINING_RING_ABOVE,
  COMBINING_DOUBLE_ACUTE_ACCENT,
  COMBINING_CARON,
  COMBINING_DOUBLE_GRAVE_ACCENT,
  COMBINING_INVERTED_BREVE,
  COMBINING_COMMA_BELOW,
  COMBINING_CEDILLA,
  COMBINING_FERMATA,
  COMBINING_HOOK_ABOVE,
  COMBINING_DOT_BELOW,
  COMBINING_LOW_LINE,
  COMBINING_TILDE_BELOW,
  COMBINING_BREVE_BELOW,
  COMBINING_DIAERESIS_BELOW,
  COMBINING_RIGHT_HALF_RING_ABOVE,
  COMBINING_GREEK_DIALYTIKA_TONOS,
  COMBINING_DOUBLE_VERTICAL_LINE_BELOW,
  COMBINING_MACRON_BELOW,
  COMBINING_SEMIVOICED_SOUND_MARK,
  COMBINING_VOICED_SOUND_MARK,
  COMBINING_LEFT_HALF_RING_ABOVE,
  COMBINING_EMPHASIS_MARK,
  COMBINING_EXCLAMATION_MARK,
  COMBINING_QUESTION_MARK,
  COMBINING_DEVANAGARI_SIGN_INVERTED_CANDRABINDU,
  COMBINING_DEVANAGARI_SIGN_CANDRABINDU,
  COMBINING_DEVANAGARI_SIGN_ANUSVARA,
  COMBINING_DEVANAGARI_VOWEL_SIGN_OE,
  COMBINING_DEVANAGARI_SIGN_NUKTA,
  COMBINING_DEVANAGARI_VOWEL_SIGN_U,
  COMBINING_DEVANAGARI_VOWEL_SIGN_UU,
  COMBINING_DEVANAGARI_VOWEL_SIGN_VOCALIC_R,
  COMBINING_DEVANAGARI_VOWEL_SIGN_VOCALIC_RR,
  COMBINING_DEVANAGARI_VOWEL_SIGN_CANDRA_E,
  COMBINING_DEVANAGARI_VOWEL_SIGN_SHORT_E,
  COMBINING_DEVANAGARI_VOWEL_SIGN_E,
  COMBINING_DEVANAGARI_VOWEL_SIGN_AI,
  COMBINING_DEVANAGARI_STRESS_SIGN_UDATTA,
  COMBINING_DEVANAGARI_STRESS_SIGN_ANUDATTA,
  COMBINING_DEVANAGARI_ACUTE_ACCENT,
  COMBINING_DEVANAGARI_VOWEL_SIGN_CANDRA_LONG_E,
  COMBINING_DEVANAGARI_VOWEL_SIGN_UE,
  COMBINING_DEVANAGARI_VOWEL_SIGN_UUE,
  COMBINING_DEVANAGARI_VOWEL_SIGN_VOCALIC_L,
  COMBINING_DEVANAGARI_VOWEL_SIGN_VOCALIC_LL,
};


////////////////////////////////////////////////////////////////////////////////
/** Many characters can be formed by transforming others.
 *  This routine accepts a "command" byte and an "index" byte. 
 *  The "index" specifies a base glyph, and the "command" specifies some way to
 *  transform this glyph.
 *  @param index: index into the character bitmap
 *  @param command: command code to transform it
 */
int handle_transform(unsigned int transform_code) {
  unsigned int base_glyph = transform_code & 511;
  unsigned int command    = transform_code & 65024;

  //Serial.print("base glyph: ");
  //Serial.println(base_glyph);
  //Serial.print("command: ");
  //Serial.println(command);
  
  // Load base glyph into memory
  // TODO: we want to create some special cases
  // base_glyph = 0 --> nothing
  // base_glyph = 1 --> combining diacritic alias
  // command = any extended code page --> increment glyph index
  switch (command) {
    case T_EP2: base_glyph += 512; command=0; break;
  }

  if (base_glyph==0) return NOT_IMPLEMENTED;
  else if (base_glyph==1) {
    // Special case: interpret transform like a combining modifier
    // and apply to previously drawn character, if possible. 
    if (combining_ok) {row=prev_row; col=prev_col;}
    else clear_bitmap();
  }
  else load_glyph_bitmap(base_glyph-1);
  
  if (command) {
    // "transforms" that just call out to combining diacritics
    byte shortened = (command >> 9) - 1;
    if (shortened<N_TRANSFORM_COMBINING)
      combine_diacritic(pgm_read_byte(modifier_transforms+shortened));
    // Else apply transformation command
    else switch (command) {
      case T_H5: { // HREFLECTMAG
        mirror_horizontal(1);
      } break;
      case T_H6: { // HREFLECTMIN
        mirror_horizontal(0);
      } break;
      case T_VU: { // VREFLECTMAG
        mirror_vertical_uppercase();
      } break;
      case T_VL: { // VREFLECTMIN
        mirror_vertical_lowercase();
      } break;
      case T_TU: { // TURNMAG
        mirror_horizontal(1); mirror_vertical_uppercase();
      } break;
      case T_TL: { // TURNMIN
        mirror_horizontal(1); mirror_vertical_lowercase();
      } break;
      case T_MDL: { // MIDDLE_DOT_LOWER
        char_bitmap[CH/2-2] |= 0b001000;
      } break;
      case T_MDR: { // MIDDLE_DOT_RIGHT
        char_bitmap[CH/2-1] |= 0b100000;
      } break;
      case T_MDU: { // MIDDLE_DOT_UPPER
        char_bitmap[CH/2-1] |= 0b001000;
      } break;
      case T_AAUL: { // ACUTE_ACCENT_LEFT
        char_bitmap[CH-1] = char_bitmap[CH-2] = 0b000001;
      } break;
      case T_CDAL: { // CEDILLA_ABOVE_LOWER
        char_bitmap[MIDLINE+4] |= 0b011000;char_bitmap[MIDLINE+3] |= 0b001000;
      } break;
      case T_DSU: { // DIAGONAL_STROKE_UPPER
        char_bitmap[BASELINE+6] |= 0b100000;
        char_bitmap[BASELINE+5] |= 0b010000;
        char_bitmap[BASELINE+4] |= 0b010000;
        char_bitmap[BASELINE+3] |= 0b001000;
        char_bitmap[BASELINE+2] |= 0b000100;
        char_bitmap[BASELINE+1] |= 0b000100;
        char_bitmap[BASELINE+0] |= 0b000010;
      } break;
      case T_DSL: { // DIAGONAL_STROKE_LOWER
        char_bitmap[BASELINE+4] |= 0b100000;
        char_bitmap[BASELINE+3] |= 0b010000;
        char_bitmap[BASELINE+2] |= 0b001000;
        char_bitmap[BASELINE+1] |= 0b000100;
        char_bitmap[BASELINE+0] |= 0b000010;
      } break;
      case T_ONR: { // OGONEK_RIGHT
        char_bitmap[BASELINE-1] |= 0b010000;char_bitmap[BASELINE-2] |= 0b110000;
      } break;
      case T_ONM: { // OGONEK_MIDDLE
        char_bitmap[BASELINE-1] |= 0b001000;char_bitmap[BASELINE-2] |= 0b011000;
      } break;
      case T_RAV: { // CARON_VARIANT
        if ((char_bitmap[9]&0b100000)||(char_bitmap[8]&0b100000)) {
          for (byte i=0; i<CH; i++) {
            char_bitmap[i] = (char_bitmap[i]|((char_bitmap[i]&0b100000)>>1))&0b011111;
          }
        }
        char_bitmap[9] |= 0b100000;
        char_bitmap[8]  |= 0b100000;
      } break;
      case T_HK1: { // LOWER_RIGHT_TAIL
        char_bitmap[BASELINE-1] |= 0b100000;char_bitmap[BASELINE-2] |= 0b010000;
      } break;
      case T_HK2: { // HOOK_2
        char_bitmap[BASELINE-1] |= 0b100000;char_bitmap[BASELINE-2] |= 0b110000;
      } break;
      case T_HK3: { // PALATAL_HOOK
        char_bitmap[BASELINE-1] |= 0b100000;char_bitmap[BASELINE-2] |= 0b011000;
      } break;
      case T_AALL: { // APOSTROPHE_ABOVE_LEFT_LOWER
        char_bitmap[MIDLINE+4] |= 0b000001;char_bitmap[MIDLINE+3] |= 0b000001;
      } break;
      case T_SMLFH: { // STROKE_MID_LEFT_HALF
        char_bitmap[5] |= 0b000111;
      } break;
      case T_SUMLH: { // STROKE_UPPER_MID_RIGHT_HALF
        char_bitmap[8] |= 0b111000;
      } break;
      case T_SUF: { // STROKE_UPPER_FULL
        char_bitmap[7] |= 0b111111;
      } break;
      case T_SMF: { // STROKE_MIDDLE_FULL
        char_bitmap[6] |= 0b011111;
      } break;
      case T_SULH: { // STROKE_UPPER_LEFT_HALF
        char_bitmap[8] |= 0b000111;
      } break;
      case T_LDS: { // DIAGONAL_STROKE_LEFT
        char_bitmap[4] |= 0b000110;char_bitmap[5] |= 0b000011;
      } break;
      case T_DSM: { // DIAGONAL_STROKE_MID
        char_bitmap[5] |= 0b011000;char_bitmap[6] |= 0b001100;
      } break;
      case T_SMMH: { // STROKE_MID_MID_HALF
        char_bitmap[5] |= 0b011100;
      } break;
      case T_SMLH: { // STROKE_MID_LOWER_HALF
        char_bitmap[4] |= 0b011110;
      } break;
      case T_DS1: { // RIGHT_DESCENDER
        char_bitmap[1] |= 0b100000;char_bitmap[0] |= 0b100000;
      } break;
      case T_MRD: { // MIDRIGHT_DESCENDER
        char_bitmap[1] |= 0b010000;char_bitmap[0] |= 0b010000;
      } break;
      case T_KDS: { // KDIAGONAL_STROKE
        char_bitmap[4] |= 0b100000;
        char_bitmap[3] |= 0b010000;
        char_bitmap[2] |= 0b001000;
      } break;
      case T_LDSC: { // LEFT_DESCENDER
        char_bitmap[1] |= 0b000010;
        char_bitmap[0] |= 0b000010;
      } break;
      case T_LVT: { // LVERTTICK
        char_bitmap[7] |= 0b000001;
      } break;
      case T_LHU: { // LEFT_HOOK_UPPER
        for (byte i=0; i<CH; i++) char_bitmap[i] = (0b111100&char_bitmap[i]) | ((char_bitmap[i]&0b000011)<<1);
        char_bitmap[8] |= 0b000011;
        char_bitmap[7] |= 0b000001;
      } break;
      case T_RHU: { // RIGHT_HOOK_UPPER
        for (byte i=0; i<CH; i++) char_bitmap[i] = (0b001111&char_bitmap[i]) | ((char_bitmap[i]&0b110000)>>1);
        char_bitmap[8] |= 0b110000;
        char_bitmap[7] |= 0b100000;
      } break;
      case T_BLD: { // BOLD
        hboldright();
      } break;
      case T_VBD: { // VERYBOLD
        hboldright(); hboldleft();
      } break;
      case T_TMB: { // ENTOMB
        entomb();
      } break;
      case T_ITA: { // ITALIC
        italicize();
      } break;
      case T_OLN: { // OUTLINE
        outline();
      } break;
      case T_EP2: { // EXTENDED_CODEPAGE_2
        
      } break;
      default: return NOT_IMPLEMENTED;
    }
  }
  return LOADED;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Datastructure to store base glyph + transform for each mapped block.
// Each codepoint is associated with a uint16_t. The top TRANSFORMBITS bits
// encode a transformation code. The bottom CHARBITS store an index to a "base
// glyph" to be transformed. Index 0 is reserved for "missing glyph", index 1
// is reserved for "combining diacritics", and index 2 is reserved for SPACE.
// Some of the transformation codes, those starting with T_EP*, tell the code
// to pull the glyph from one of the "extended" code-pages of extra glyphs,
// rather than apply a transform. To save space, unicode blocks with only a few
// defined glyphs are packed as "sparse". For these, we only store codes for
// characters that are actually mapped. The `sparse_indecies` array tells us
// which codepoints within each block are actually mapped, and the 
// `sparse_nmapped` tells us how many are mapped. For a given sparse block,
// the array `sparse_offsets` tells us where to start reading from 
// `sparse_indecies` to get the list of supported codepoints. Dense blocks 
// store a contiguous range of codepoints, with 0 indicating missing codepoints.
// Not all dense blocks cover the entire range of the given unicode block.
// The arrays `first_offsets` and `last_offsets` tell us the subset of each
// block which is actually mapped, for both sparse and dense blocks. The array
// `bstart_indecies` tells us where to start reading code data from each block
// from the `codepoint_map` array.
static const unsigned int codepoint_map[] PROGMEM = {
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000250-0x000002AF "IPA Extensions".
// Offsets in 1-79 are mapped.
// This is a sparse block.  
  G_AL2L|0,     G_AL2L|T_H5,  G_CL|T_H6,    G_EL|T_H5,    G_EL|T_TL,    G_O2L|0,      G_O2L|T_H6,   G_DJL|T_SMLH, 
  G_GU|0,       G_GA2L|0,     G_IL|T_SMLH,  G_DIL|0,      G_IL|0,       G_ML|T_VL,    G_TMWL|0,     G_MWHL|0,     
  G_NU|0,       G_OL|T_SMLH,  G_PHIL|0,     G_RU|0,       G_RU|T_VL,    G_UL|0,       G_TWL|0,      G_YL|0,       
  G_EZHL|0,     G_GSU|0,      G_WHIC|T_MDU, G_SCBLU|0,    G_HU|0,       G_LU|0,       
////////////////////////////////////////////////////////////////////////////////
// Data for 0x000002B0-0x000002FF "Spacing Modifier Letters".
// Offsets in 9-72 are mapped.
// This is a sparse block.  
  G_SPAC|T_AA,  G_SPAC|T_AA,  G_SPAC|T_AA,  G_SPAC|T_XA,  G_SPAC|T_CRA, G_APOS|0,     G_SPAC|T_MA,  G_SPAC|T_AA,  
  G_GRAA|0,     G_COLO|0,     G_HYPH|0,     G_SPAC|T_BA,  G_SPAC|T_OA,  G_DEGS|0,     G_SPAC|T_ONM, G_SPAC|T_TA,  
  G_SPAC|T_DAA, G_GRAA|0,     G_COLO|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000500-0x0000052F "Cyrillic Supplement".
// Offsets in 0-47 are mapped.
// This is a sparse block.  
  G_PU|T_TU,    G_DL|0,       G_GU|0,       G_GU|0,       G_DIG3|T_H5,  G_O2L|0,      G_QU|0,       G_QL|0,       
  G_WU|0,       G_WL|0,       G_PIU|T_DS1,  G_PIL|T_DS1,  G_HL|T_DS1,   G_HL|T_DS1,   G_ELU|T_DS1,  G_ELL|T_DS1,  
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00001E00-0x00001EFF "Latin Extended Additional".
// Offsets in 2-255 are mapped.
// This is a sparse block.  
  G_BU|T_OA,    G_BL|T_OA,    G_BU|T_OBLW,  G_BL|T_OBLW,  G_BU|T_LBLW,  G_BL|T_LBLW,  G_DU|T_OA,    G_DL|T_OA,    
  G_DU|T_OBLW,  G_DL|T_OBLW,  G_DU|T_LBLW,  G_DL|T_LBLW,  G_DU|T_CDL,   G_DL|T_CDL,   G_DU|T_XB,    G_DL|T_XB,    
  G_EU|T_XB,    G_EL|T_XB,    G_EU|T_TBLW,  G_EL|T_TBLW,  G_FU|T_OA,    G_FL|T_OA,    G_GU|T_MA,    G_GL|T_MA,    
  G_HU|T_OA,    G_HL|T_OA,    G_HU|T_OBLW,  G_HL|T_OBLW,  G_HU|T_DA,    G_HL|T_DA,    G_HU|T_CDL,   G_HL|T_CDL,   
  G_HU|T_BBLW,  G_HL|T_BBLW,  G_IU|T_TBLW,  G_IL|T_TBLW,  G_KU|T_AA,    G_KL|T_AA,    G_KU|T_OBLW,  G_KL|T_OBLW,  
  G_KU|T_LBLW,  G_KL|T_LBLW,  G_LU|T_OBLW,  G_LL|T_OBLW,  G_LU|T_LBLW,  G_LL|T_LBLW,  G_LU|T_XB,    G_LL|T_XB,    
  G_MU|T_AA,    G_ML|T_AA,    G_MU|T_OA,    G_ML|T_OA,    G_MU|T_OBLW,  G_ML|T_OBLW,  G_NU|T_OA,    G_NL|T_OA,    
  G_NU|T_OBLW,  G_NL|T_OBLW,  G_NU|T_LBLW,  G_NL|T_LBLW,  G_NU|T_XB,    G_NL|T_XB,    G_PU|T_AA,    G_PL|T_AA,    
  G_PU|T_OA,    G_PL|T_OA,    G_RU|T_OA,    G_RL|T_OA,    G_RU|T_OBLW,  G_RL|T_OBLW,  G_RU|T_LBLW,  G_RL|T_LBLW,  
  G_SU|T_OA,    G_SL|T_OA,    G_SU|T_OBLW,  G_SL|T_OBLW,  G_TU|T_OA,    G_TL|T_OA,    G_TU|T_OBLW,  G_TL|T_OBLW,  
  G_TU|T_LBLW,  G_TL|T_LBLW,  G_TU|T_XB,    G_TL|T_XB,    G_UU|T_DBLW,  G_UL|T_DBLW,  G_UU|T_TBLW,  G_UL|T_TBLW,  
  G_UU|T_XB,    G_UL|T_XB,    G_VU|T_TA,    G_VL|T_TA,    G_VU|T_OBLW,  G_VL|T_OBLW,  G_WU|T_GA,    G_WL|T_GA,    
  G_WU|T_AA,    G_WL|T_AA,    G_WU|T_DA,    G_WL|T_DA,    G_WU|T_OA,    G_WL|T_OA,    G_WU|T_OBLW,  G_WL|T_OBLW,  
  G_XU|T_OA,    G_XL|T_OA,    G_XU|T_DA,    G_XL|T_DA,    G_YU|T_OA,    G_YL|T_OA,    G_ZU|T_XA,    G_ZL|T_XA,    
  G_ZU|T_OBLW,  G_ZL|T_OBLW,  G_ZU|T_LBLW,  G_ZL|T_LBLW,  G_HL|T_LBLW,  G_TL|T_DA,    G_WL|T_RA,    G_YL|T_RA,    
  G_AL|T_RHRA,  G_SL|T_OA,    G_LSL|T_DSM,  G_SSU|0,      G_DELL|0,     G_AU|T_OBLW,  G_AL|T_OBLW,  G_AU|T_HKAB,  
  G_AL|T_HKAB,  G_EU|T_OBLW,  G_EL|T_OBLW,  G_EU|T_HKAB,  G_EL|T_HKAB,  G_EU|T_TA,    G_EL|T_TA,    G_IU|T_HKAB,  
  G_IL|T_HKAB,  G_IU|T_OBLW,  G_IL|T_OBLW,  G_OU|T_OBLW,  G_OL|T_OBLW,  G_OU|T_HKAB,  G_OL|T_HKAB,  G_UU|T_OBLW,  
  G_UL|T_OBLW,  G_UU|T_HKAB,  G_UL|T_HKAB,  G_YU|T_GA,    G_YL|T_GA,    G_YU|T_OBLW,  G_YL|T_OBLW,  G_YU|T_HKAB,  
  G_YL|T_HKAB,  G_YU|T_TA,    G_YL|T_TA,    G_MVU|0,      G_MVL|0,      G_YL|0,       
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00001F00-0x00001FFF "Greek Extended".
// Offsets in 189-254 are mapped.
// This is a sparse block.  
  G_APOS|0,     G_COMM|0,     G_APOS|0,     G_SPAC|T_AA,  G_APOS|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002000-0x0000206F "General Punctuation".
// Offsets in 2-90 are mapped.
// This is a sparse block.  
  G_SPAC|0,     G_SPAC|0,     G_SPAC|0,     G_SPAC|0,     G_SPAC|0,     G_SPAC|0,     G_SPAC|0,     G_SPAC|0,     
  G_SPAC|0,     G_HYPH|0,     G_HYPH|0,     G_HYPH|0,     G_HYPH|0,     G_ED|0,       G_ED|0,       G_DOVL|0,     
  G_APOS|0,     G_APOS|0,     G_COMM|0,     G_QUOM|0,     G_QUOM|0,     G_SPAC|T_DVLB,G_QUOM|0,     G_DAGG|0,     
  G_AC|0,       G_BULL|0,     G_FULS|0,     G_HORE|0,     G_SPAC|T_MDU, G_PMS|0,      G_PTTS|0,     G_SPAC|T_AA,  
  G_GRAA|0,     G_LESS|0,     G_LESS|T_H5,  G_DOEM|0,     G_INT2|0,     G_PILS|T_H5,  G_COLO|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x000020A0-0x000020CF "Currency Symbols".
// Offsets in 7-31 are mapped.
// This is a sparse block.  
  G_PESS|0,     G_WOS|0,      G_NSS|0,      G_EURS|0,     G_TUGS|0,     G_GEPS|0,     G_AUSS|0,     G_TU|T_OBA,   
  G_INRS|0,     G_TULS|0,     G_RUBS|0,     G_LARS|0,     G_BITS|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002190-0x000021FF "Arrows".
// Offsets in 0-110 are mapped.
// This is a sparse block.  
  G_RIGA|T_H5,  G_UPWA|0,     G_RIGA|0,     G_UPWA|T_VU,  G_LERA|0,     G_UDA|0,      G_NOWA|0,     G_NOWA|T_H5,  
  G_NOWA|T_TU,  G_NOWA|T_VU,  G_R2HA|T_H6,  G_D2HA|T_VU,  G_R2HA|0,     G_D2HA|0,     G_UDAW|0,     G_DOZA|0,     
  G_UAWT|0,     G_UAWT|T_H5,  G_UAWT|T_VU,  G_UAWT|T_TU,  G_RAWC|0,     G_UAWT|T_VU,  G_ATSA|0,     G_ATSA|T_H5,  
  G_LATB|0,     G_AOCA|0,     G_AOCA|T_H5,  G_RHWB|T_H5,  G_RHWB|T_TU,  G_UHWB|T_H5,  G_UHWB|0,     G_RHWB|0,     
  G_RHWB|T_VU,  G_UHWB|T_TU,  G_UHWB|T_VU,  G_RAOL|0,     G_RID2|T_H6,  G_RID2|0,     G_UDA|T_OLN,  G_RIDA|T_H5,  
  G_UPDA|0,     G_RIDA|0,     G_UPDA|T_VU,  G_UPWA|T_OLN, G_RIGA|T_OLN, G_UDA|T_OLN,  G_RIOA|T_H5,  G_RIOA|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002200-0x000022FF "Mathematical Operators".
// Offsets in 0-255 are mapped.
// This is a sparse block.  
  G_AU|T_VU,    G_CU|0,       G_PARD|0,     G_EU|T_H5,    G_OL|T_DSL,   G_DELU|0,     G_NABL|0,     G_ELEO|0,     
  G_LUEM|0,     G_LUEM|T_H6,  G_EOP|0,      G_PIU|0,      G_ESHU|0,     G_HYPH|0,     G_PLU2|T_VU,  G_SOLI|0,     
  G_SOLI|T_H5,  G_ASTE|0,     G_RINO|0,     G_BULL|0,     G_SQUR|0,     G_INFI|0,     G_RIG2|0,     G_VERL|0,     
  G_DOVL|0,     G_VL|0,       G_ETSB|0,     G_UU|0,       G_INTE|0,     G_DOUI|0,     G_COLO|0,     G_ALET|0,     
  G_NET|0,      G_IDET|0,     G_GOET|T_H5,  G_GOET|0,     G_WHIC|T_MDU, G_TU|0,       G_TU|T_VU,    G_BLRT|T_OLN, 
  G_VL|0,       G_UU|T_VU,    G_UU|0,       G_BLAD|T_OLN, G_SPAC|T_MDU, G_EU|0,       
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002300-0x000023FF "Miscellaneous Technical".
// Offsets in 16-122 are mapped.
// This is a sparse block.  
  G_NOS|T_H6,   G_THI|0,      G_BOHI|0,     G_IOTL|0,     G_RHOL|0,     G_OMEL|0,     G_ALPL|T_LBLW,G_O2L|T_LBLW, 
  G_IOTL|T_LBLW,G_OMEL|T_LBLW,G_ALPL|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x000025A0-0x000025FF "Geometric Shapes".
// Offsets in 0-94 are mapped.
// This is a sparse block.  
  G_EOP|0,      G_WHIS|0,     G_BLAR|0,     G_BLUT|0,     G_DELU|0,     G_BLUT|0,     G_DELU|0,     G_BLRT|0,     
  G_BLRT|T_OLN, G_BLRT|T_OLN, G_BLRT|0,     G_BLRT|T_OLN, G_BLUT|T_VU,  G_NABL|0,     G_BLUT|T_VU,  G_NABL|0,     
  G_BLRT|T_H5,  G_BLRT|T_H5,  G_BLAD|0,     G_BLAD|T_OLN, G_BLAD|0,     G_LOZE|0,     G_WHIC|0,     _COMB_|0,     
  G_WHIC|0,     G_BLAC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     
  G_RINO|0,     G_BLAC|0,     G_RINO|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     
  G_WHIS|0,     G_EOP|0,      G_WHIS|0,     G_EOP|0,      
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002600-0x000026FF "Miscellaneous Symbols".
// Offsets in 5-230 are mapped.
// This is a sparse block.  
  G_BLAS|0,     G_WHIC|T_MDU, G_WHIS|0,     G_CHEM|T_TMB, G_MULS|T_TMB, G_ANKH|0,     G_ANKH|0,     G_ANKH|0,     
  G_ANKH|0,     G_CROJ|0,     G_BLSF|T_OLN, G_BLSF|0,     G_WSWR|0,     G_FEMS|0,     G_MALS|0,     G_BLSS|0,     
  G_BLHS|T_OLN, G_BLAD|T_OLN, G_BLCS|0,     G_BLSS|T_OLN, G_BLHS|0,     G_BLAD|0,     G_BLCS|T_OLN, G_QUAN|0,     
  G_QUAN|0,     G_BE8N|0,     G_BE8N|0,     G_ANKH|0,     G_ANKH|0,     G_WHIC|0,     G_WHIC|0,     G_BLAC|0,     
  G_BLAC|0,     G_WARS|0,     G_BLAC|0,     G_BLAC|0,     G_RINO|0,     G_NABL|0,     G_BLAS|0,     G_BLAS|0,     
  G_BLAS|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002900-0x0000297F "Supplemental Arrows-B".
// Offsets in 12-77 are mapped.
// This is a sparse block.  
  G_RIDA|T_H5,  G_RIDA|0,     G_RIDA|T_H5,  G_RIDA|0,     G_RIDA|0,     G_RIDA|0,     G_XL|0,       G_XL|0,       
  G_CCCA|T_H5,  G_CCCA|0,     G_LBDR|T_VU,  G_LBDR|0,     G_UBLD|T_H5,  G_UBLD|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002B00-0x00002BFF "Miscellaneous Symbols and Arrows".
// Offsets in 1-239 are mapped.
// This is a sparse block.  
  G_NOWA|T_OLN, G_LERA|T_OLN, G_UPWA|T_BLD, G_NOWA|T_BLD, G_LERA|T_BLD, G_UDA|T_BLD,  G_BLAC|0,     G_BLAD|0,     
  G_BLAD|T_OLN, G_BLAD|0,     G_RIDA|T_H5,  G_RIDA|T_H5,  G_RIOA|T_H5,  G_UPTA|0,     G_RIOA|0,     G_UPTA|T_VU,  
  G_RIDA|T_H5,  G_UPDA|0,     G_RIDA|0,     G_UPDA|T_VU,  G_UPTA|T_TMB, G_RIOA|T_TMB, G_UPTA|T_TMB, G_TTRA|T_H5,  
  G_TRUE|0,     G_TTRA|0,     G_TRUE|T_VU,  G_TTRA|T_H5,  G_TRUE|0,     G_TTRA|0,     G_TRUE|T_VU,  G_BLAD|0,     
  G_BLUT|0,     G_BLUT|T_VU,  G_BLRT|T_H5,  G_BLRT|0,     G_R2AW|T_H6,  G_D2AW|T_VU,  G_R2AW|0,     G_D2AW|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002C60-0x00002C7F "Latin Extended-C".
// Offsets in 3-22 are mapped.
// This is a sparse block.  
  G_PU|T_SULH,  G_HU|T_DS1,   G_HL|T_DS1,   G_KU|T_DS1,   G_KL|T_DS1,   G_ZU|T_DS1,   G_ZL|T_DS1,   G_MU|T_HK2,   
  G_AU|T_VU,    G_WU|T_RHU,   G_HETU|0,     G_HETL|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0000A640-0x0000A69F "Cyrillic Extended-B".
// Offsets in 4-87 are mapped.
// This is a sparse block.  
  G_SU|T_H5,    G_SU|T_H5,    G_IOTL|0,     G_OUU|0,      G_OUU|0,      G_OM2U|0,     G_OMEL|0,     G_IAU|0,      
  G_IAL|0,      G_IAU|0,      G_YNU|0,      G_WHIC|T_MDU, G_OL|T_MDL,   G_BOU|0,      G_BOL|0,      G_DMOU|0,     
  G_DMOL|0,     G_MO|0,       G_SPAC|T_BA,  G_DWEU|0,     G_DWEL|0,     G_DZWU|0,     G_DZWL|0,     G_SHWU|0,     
  G_SHWL|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0000A720-0x0000A7FF "Latin Extended-D".
// Offsets in 6-221 are mapped.
// This is a sparse block.  
  G_HU|T_HK2,   G_HL|T_HK2,   G_TZL|0,      G_DIG3|T_H5,  G_SL|0,       G_KU|T_SULH,  G_KL|T_SULH,  G_KU|T_KDS,   
  G_KL|T_KDS,   G_LU|T_SULH,  G_LL|T_SULH,  G_OWMU|0,     G_OL|T_SMLH,  G_DMOU|0,     G_DMOL|0,     G_MVU|T_VU,   
  G_MVL|T_VL,   G_SUP9|0,     G_AMPE|0,     G_LU|T_TU,    G_NL|T_LDSC,  G_RL|T_LDSC,  G_SPAC|T_XB,  G_COLO|0,     
  G_EQUS|0,     G_APOS|0,     G_APOS|0,     G_HL|T_VU,    G_BULL|0,     G_NU|T_DS1,   G_NL|T_DS1,   G_CL|T_HK3,   
  G_HL|T_HK3,   G_FU|0,       G_UL|0,       G_DIG3|0,     G_KU|T_TU,    G_TU|T_VU,    G_JU|0,       G_XU|0,       
  G_BU|T_LDSC,  G_BETL|0,     G_OM2U|0,     G_OMEL|0,     G_CU|T_HK3,   G_ZU|T_HK3,   G_SHAL|0,     G_FU|T_H5,    
  G_PU|T_H5,    G_MU|T_VU,    
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0000AB30-0x0000AB6F "Latin Extended-E".
// Offsets in 2-42 are mapped.
// This is a sparse block.  
  G_EL|0,       G_OL|T_VBD,   G_UL|0,       G_UL|0,       G_YL|0,       
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0001F300-0x0001F3FF "Miscellaneous Symbols and Pictographs1".
// Offsets in 148-246 are mapped.
// This is a sparse block.  
  G_BLHS|0,     G_BE8N|0,     G_BE8N|0,     G_HEAD|0,     G_WHIC|T_MDU, G_WHIC|T_MDU, 
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0001F400-0x0001F4FF "Miscellaneous Symbols and Pictographs2".
// Offsets in 70-222 are mapped.
// This is a sparse block.  
  G_WUPB|0,     G_WUPB|T_VU,  G_WRPB|T_H5,  G_WRPB|0,     G_THUS|0,     G_THUS|T_VU,  G_GHOS|0,     G_ALIM|0,     
  G_SKUL|0,     G_SYRI|0,     G_GES|0,      G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     
  G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     G_BLHS|0,     
  G_LOZE|0,     G_DOLS|T_TMB, G_YES|0,      G_YES|0,      G_MINI|0,     G_FLOD|0,     G_MINI|0,     G_MINI|0,     
  G_CARI|0,     G_TELR|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0001F500-0x0001F5FF "Miscellaneous Symbols and Pictographs3".
// Offsets in 6-249 are mapped.
// This is a sparse block.  
  G_WSWR|0,     G_SWCS|0,     G_SPEA|0,     G_SW1S|0,     G_SW3S|0,     G_LERA|T_TMB, G_RIGA|T_TMB, G_UPWA|T_TMB, 
  G_BLAC|0,     G_BLAC|0,     G_LOZE|0,     G_LOZE|0,     G_BLAD|0,     G_BLAD|0,     G_BLUT|0,     G_BLUT|T_VU,  
  G_BLUT|T_TMB, G_WHIC|0,     G_WHIC|0,     G_CROJ|0,     G_CROJ|0,     G_CROJ|0,     G_ANKH|0,     G_ANKH|0,     
  G_ANKH|0,     G_SPEA|0,     G_SW1S|0,     G_SW3S|0,     G_TELR|0,     G_TELR|0,     G_TELR|0,     G_TELR|0,     
  G_TELR|0,     G_TELR|0,     G_TELR|0,     G_THUS|0,     G_THUS|T_VU,  G_WUPB|T_VU,  G_WRPB|T_H5,  G_WRPB|0,     
  G_WRPB|T_H5,  G_WRPB|0,     G_WRPB|T_H5,  G_WRPB|0,     G_WUPB|0,     G_WUPB|T_VU,  G_WUPB|0,     G_WUPB|T_VU,  
  G_WUPB|0,     G_WUPB|T_VU,  G_BLHS|T_OLN, G_FLOD|0,     G_FLOD|0,     G_FLOD|0,     G_EMPN|0,     G_EMPN|0,     
  G_EMPN|0,     G_NOTE|0,     G_NOTE|0,     G_NOTE|0,     G_EMPN|0,     G_EMPN|0,     G_EMPN|0,     G_NOTE|0,     
  G_NOTE|0,     G_NOTE|0,     G_WAST|0,     G_NOTE|0,     G_BALX|0,     G_BALX|T_TMB, G_BALX|T_BLD, G_CHEM|T_TMB, 
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0001F800-0x0001F8FF "Supplemental Arrows-C".
// Offsets in 5-147 are mapped.
// This is a sparse block.  
  G_UPTA|T_BLD, G_RIOA|T_BLD, G_UPTA|T_VBD, G_RIOA|T_VBD, G_RIOA|T_H5,  G_UPTA|0,     G_RIOA|0,     G_UPTA|T_VU,  
  G_UPTA|T_BLD, G_RIOA|T_BLD, G_UPTA|T_VBD, G_RIOA|T_VBD, G_RIOA|T_H5,  G_UPTA|0,     G_RIOA|0,     G_UPTA|T_VU,  
  G_UPTA|T_BLD, G_RIOA|T_BLD, G_UPTA|T_VBD, G_RIOA|T_VBD, G_UPTA|T_VBD, G_RIOA|T_VBD, G_RISA|T_H5,  G_UPSA|0,     
  G_RISA|0,     G_UPSA|T_VU,  G_UPCA|0,     G_UPCA|T_VU,  G_RHCA|T_H5,  G_UPCA|0,     G_RHCA|0,     G_UPCA|T_VU,  
  G_RIHA|T_H6,  G_UPHA|0,     G_RIHA|0,     G_UPHA|T_VU,  G_RIGA|T_H5,  G_UPWA|0,     G_RIGA|0,     G_UPWA|T_VU,  
  G_NOWA|0,     G_NOWA|T_H5,  G_NOWA|T_TU,  G_NOWA|T_VU,  G_LERA|0,     G_UDA|T_OLN,  G_RIGA|T_H5,  G_WSEB|T_TU,  
  G_WSEB|T_VU,  G_WSEB|0,     G_WSEB|T_H5,  G_WSEB|T_BLD, G_WSEB|T_VBD, G_WSEB|T_VBD, G_BLRT|T_H5,  G_BLUT|0,     
  G_BLRT|0,     G_BLUT|T_VU,  
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000000-0x0000007F "Basic Latin".
// Offsets in 32-126 are mapped.  
  G_SPAC|0,     G_EXCM|0,     G_QUOM|0,     G_NUMS|0,     G_DOLS|0,     G_PERS|0,     G_AMPE|0,     G_APOS|0,     
  G_LEFP|0,     G_LEFP|T_H5,  G_ASTE|0,     G_PLUS|0,     G_COMM|0,     G_HYPH|0,     G_FULS|0,     G_SOLI|0,     
  G_DIG0|0,     G_DIG1|0,     G_DIG2|0,     G_DIG3|0,     G_DIG4|0,     G_DIG5|0,     G_DIG6|0,     G_DIG7|0,     
  G_DIG8|0,     G_DIG9|0,     G_COLO|0,     G_SEMI|0,     G_LESS|0,     G_EQUS|0,     G_LESS|T_H5,  G_QUEM|0,     
  G_COMA|0,     G_AU|0,       G_BU|0,       G_CU|0,       G_DU|0,       G_EU|0,       G_FU|0,       G_GU|0,       
  G_HU|0,       G_IU|0,       G_JU|0,       G_KU|0,       G_LU|0,       G_MU|0,       G_NU|0,       G_OU|0,       
  G_PU|0,       G_QU|0,       G_RU|0,       G_SU|0,       G_TU|0,       G_UU|0,       G_VU|0,       G_WU|0,       
  G_XU|0,       G_YU|0,       G_ZU|0,       G_LESB|0,     G_SOLI|T_H5,  G_LESB|T_H5,  G_CIRA|0,     G_LOL|0,      
  G_GRAA|0,     G_AL|0,       G_BL|0,       G_CL|0,       G_DL|0,       G_EL|0,       G_FL|0,       G_GL|0,       
  G_HL|0,       G_IL|0,       G_JL|0,       G_KL|0,       G_LL|0,       G_ML|0,       G_NL|0,       G_OL|0,       
  G_PL|0,       G_QL|0,       G_RL|0,       G_SL|0,       G_TL|0,       G_UL|0,       G_VL|0,       G_WL|0,       
  G_XL|0,       G_YL|0,       G_ZL|0,       G_LECB|0,     G_VERL|0,     G_LECB|T_H5,  G_TILD|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000080-0x000000FF "Latin-1 Supplement".
// Offsets in 32-127 are mapped.  
  G_SPAC|0,     G_EXCM|T_VU,  G_CENS|0,     G_POUS|0,     G_CURS|0,     G_YES|0,      G_BROB|0,     G_SECS|0,     
  G_SPAC|T_DA,  G_COPS|0,     G_FEOI|0,     G_LDAQ|0,     G_NOS|0,      G_SPAC|0,     G_REGS|0,     G_SPAC|T_MA,  
  G_DEGS|0,     G_PLU2|0,     G_SUP2|0,     G_SUP3|0,     G_SPAC|T_AA,  G_MICS|0,     G_PILS|0,     G_SPAC|T_MDU, 
  G_SPAC|T_CDL, G_SUP1|0,     G_MAOI|0,     G_LDAQ|T_H5,  G_VF1Q|0,     G_VF1H|0,     G_VF3Q|0,     G_QUEM|T_VU,  
  G_AU|T_GA,    G_AU|T_AA,    G_AU|T_XA,    G_AU|T_TA,    G_AU|T_DA,    G_AU|T_RA,    G_AEU|0,      G_CU|T_CDL,   
  G_EU|T_GA,    G_EU|T_AA,    G_EU|T_XA,    G_EU|T_DA,    G_IU|T_GA,    G_IU|T_AA,    G_IU|T_XA,    G_IU|T_DA,    
  G_DU|T_SMLFH, G_NU|T_TA,    G_OU|T_GA,    G_OU|T_AA,    G_OU|T_XA,    G_OU|T_TA,    G_OU|T_DA,    G_MULS|0,     
  G_OU|T_DSU,   G_UU|T_GA,    G_UU|T_AA,    G_UU|T_XA,    G_UU|T_DA,    G_YU|T_AA,    G_THOU|0,     G_SSL|0,      
  G_AL|T_GA,    G_AL|T_AA,    G_AL|T_XA,    G_AL|T_TA,    G_AL|T_DA,    G_AL|T_RA,    G_AEL|0,      G_CL|T_CDL,   
  G_EL|T_GA,    G_EL|T_AA,    G_EL|T_XA,    G_EL|T_DA,    G_IL|T_GA,    G_IL|T_AA,    G_IL|T_XA,    G_IL|T_DA,    
  G_ETHL|0,     G_NL|T_TA,    G_OL|T_GA,    G_OL|T_AA,    G_OL|T_XA,    G_OL|T_TA,    G_OL|T_DA,    G_DIVS|0,     
  G_OL|T_DSL,   G_UL|T_GA,    G_UL|T_AA,    G_UL|T_XA,    G_UL|T_DA,    G_YL|T_AA,    G_THOL|0,     G_YL|T_DA,    
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000100-0x0000017F "Latin Extended-A".
// Offsets in 0-127 are mapped.  
  G_AU|T_MA,    G_AL|T_MA,    G_AU|T_BA,    G_AL|T_BA,    G_AU|T_ONR,   G_AL|T_ONR,   G_CU|T_AA,    G_CL|T_AA,    
  G_CU|T_XA,    G_CL|T_XA,    G_CU|T_OA,    G_CL|T_OA,    G_CU|T_CRA,   G_CL|T_CRA,   G_DU|T_CRA,   G_DL|T_RAV,   
  G_DU|T_SMLFH, G_DL|T_SUMLH, G_EU|T_MA,    G_EL|T_MA,    G_EU|T_BA,    G_EL|T_BA,    G_EU|T_OA,    G_EL|T_OA,    
  G_EU|T_ONR,   G_EL|T_ONR,   G_EU|T_CRA,   G_EL|T_CRA,   G_GU|T_XA,    G_GL|T_XA,    G_GU|T_BA,    G_GL|T_BA,    
  G_GU|T_OA,    G_GL|T_OA,    G_GU|T_CDL,   G_GL|T_CDAL,  G_HU|T_XA,    G_HL|T_XA,    G_HU|T_SUF,   G_HL|T_SULH,  
  G_IU|T_TA,    G_IL|T_TA,    G_IU|T_MA,    G_IL|T_MA,    G_IU|T_BA,    G_IL|T_BA,    G_IU|T_ONM,   G_IL|T_ONR,   
  G_IU|T_OA,    G_DIL|0,      G_IJU|0,      G_IJL|0,      G_JU|T_XA,    G_JL|T_XA,    G_KU|T_CDL,   G_KL|T_CDL,   
  G_KRAL|0,     G_LU|T_AA,    G_LL|T_AA,    G_LU|T_CDL,   G_LL|T_CDL,   G_LU|T_RAV,   G_LL|T_RAV,   G_LU|T_MDU,   
  G_LL|T_MDR,   G_LU|T_LDS,   G_LL|T_DSM,   G_NU|T_AA,    G_NL|T_AA,    G_NU|T_CDL,   G_NL|T_CDL,   G_NU|T_CRA,   
  G_NL|T_CRA,   G_NL|T_AALL,  G_NU|T_HK1,   G_NL|T_HK1,   G_OU|T_MA,    G_OL|T_MA,    G_OU|T_BA,    G_OL|T_BA,    
  G_OU|T_DAA,   G_OL|T_DAA,   G_OEU|0,      G_OEL|0,      G_RU|T_AA,    G_RL|T_AA,    G_RU|T_CDL,   G_RL|T_CDL,   
  G_RU|T_CRA,   G_RL|T_CRA,   G_SU|T_AA,    G_SL|T_AA,    G_SU|T_XA,    G_SL|T_XA,    G_SU|T_CDL,   G_SL|T_CDL,   
  G_SU|T_CRA,   G_SL|T_CRA,   G_TU|T_CDL,   G_TL|T_CDL,   G_TU|T_CRA,   G_TL|T_RAV,   G_TU|T_SMMH,  G_TL|T_SMLH,  
  G_UU|T_TA,    G_UL|T_TA,    G_UU|T_MA,    G_UL|T_MA,    G_UU|T_BA,    G_UL|T_BA,    G_UU|T_RA,    G_UL|T_RA,    
  G_UU|T_DAA,   G_UL|T_DAA,   G_UU|T_ONM,   G_UL|T_ONR,   G_WU|T_XA,    G_WL|T_XA,    G_YU|T_XA,    G_YL|T_XA,    
  G_YU|T_DA,    G_ZU|T_AA,    G_ZL|T_AA,    G_ZU|T_OA,    G_ZL|T_OA,    G_ZU|T_CRA,   G_ZL|T_CRA,   G_LSL|0,      
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000180-0x0000024F "Latin Extended-B".
// Offsets in 0-207 are mapped.  
  G_BL|T_SULH,  G_BU|T_LHU,   G_BWTU|0,     0|0,          G_S2U|T_LVT,  G_BL|T_LVT,   G_CU|T_H5,    G_CU|T_RHU,   
  0|0,          G_DU|T_SMLFH, G_DU|T_LHU,   G_BWTU|T_H5,  0|0,          G_DELL|T_VL,  G_EU|T_H5,    G_SCHU|0,     
  G_DIG3|T_H5,  0|0,          G_FWHL|0,     G_GU|T_RHU,   G_GA2U|0,     0|0,          G_IU|0,       G_IU|T_SMMH,  
  G_KU|T_RHU,   0|0,          G_LL|T_SMMH,  0|0,          0|0,          0|0,          G_NWLL|0,     G_OWMU|0,     
  0|0,          0|0,          0|0,          0|0,          G_PU|T_LHU,   0|0,          G_RU|0,       G_SU|T_H5,    
  G_SL|T_H5,    G_ESHU|0,     0|0,          G_TL|T_HK3,   0|0,          0|0,          0|0,          0|0,          
  0|0,          G_OMEU|T_VU,  0|0,          0|0,          0|0,          G_ZU|T_SMMH,  G_ZL|T_SMLH,  G_EZHU|0,     
  G_EZHU|T_H5,  G_EZHL|T_H6,  0|0,          G_DIG2|T_SMMH,G_DIG5|T_LVT, 0|0,          0|0,          G_THOL|0,     
  G_DC|0,       G_LC|0,       G_AC|0,       G_EXCM|0,     G_DZU|T_CRA,  G_DWSLU|T_CRA,G_DZL|T_CRA,  G_LJU|0,      
  G_LWSLU|0,    G_LJL|0,      G_NJU|0,      G_NWSLU|0,    G_NJL|0,      G_AU|T_CRA,   G_AL|T_CRA,   G_IU|T_CRA,   
  G_IL|T_CRA,   G_OU|T_CRA,   G_OL|T_CRA,   G_UU|T_CRA,   G_UL|T_CRA,   0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          G_EL|T_TL,    0|0,          0|0,          
  0|0,          0|0,          G_AEU|T_MA,   G_AEL|T_MA,   0|0,          0|0,          G_GU|T_CRA,   G_GL|T_CRA,   
  G_KU|T_CRA,   G_KL|T_CRA,   G_OU|T_ONM,   G_OL|T_ONM,   0|0,          0|0,          G_EZHU|T_AA,  G_EZHL|T_AA,  
  G_JL|T_CRA,   G_DZU|0,      G_DWSLU|0,    G_DZL|0,      G_GU|T_AA,    0|0,          0|0,          0|0,          
  G_NU|T_GA,    G_NL|T_GA,    0|0,          0|0,          G_AEU|T_AA,   G_AEL|T_AA,   0|0,          0|0,          
  G_AU|T_DGA,   G_AL|T_DGA,   G_AU|T_IBA,   G_AL|T_IBA,   G_EU|T_DGA,   G_EL|T_DGA,   G_EU|T_IBA,   G_EL|T_IBA,   
  G_IU|T_DGA,   G_IL|T_DGA,   G_IU|T_IBA,   G_IL|T_IBA,   G_OU|T_DGA,   G_OL|T_DGA,   G_OU|T_IBA,   G_OL|T_IBA,   
  G_RU|T_DGA,   G_RL|T_DGA,   G_RU|T_IBA,   G_RL|T_IBA,   G_UU|T_DGA,   G_UL|T_DGA,   G_UU|T_IBA,   G_UL|T_IBA,   
  G_SU|T_CMB,   G_SL|T_CMB,   G_TU|T_CMB,   G_TL|T_CMB,   G_YOGU|0,     G_YOGL|0,     G_HU|T_CRA,   G_HL|T_CRA,   
  G_NL|T_DS1,   0|0,          G_OUU|0,      G_OUU|0,      G_ZU|T_HK3,   G_ZL|T_HK3,   G_AU|T_OA,    G_AL|T_OA,    
  G_EU|T_CDL,   G_EL|T_CDL,   0|0,          0|0,          0|0,          0|0,          G_OU|T_OA,    G_OL|T_OA,    
  0|0,          0|0,          G_YU|T_MA,    G_YL|T_MA,    0|0,          0|0,          0|0,          G_DJL|0,      
  G_DDL|0,      G_DDL|T_VL,   G_AU|T_DSU,   G_CU|T_DSU,   G_CL|T_DSL,   G_LU|T_SULH,  G_TU|T_DSU,   0|0,          
  0|0,          G_GSU|0,      0|0,          0|0,          G_UU|T_SUF,   G_TVU|0,      G_EU|T_DSU,   G_EL|T_DSL,   
  G_JU|T_SMMH,  G_JL|T_SMLH,  0|0,          0|0,          G_RU|T_SMMH,  G_RU|T_SMLH,  G_YU|T_SUF,   G_YL|T_SMF,   
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000370-0x000003FF "Greek and Coptic".
// Offsets in 0-142 are mapped.  
  G_HETU|0,     G_HETL|0,     G_ASU|0,      G_ASL|0,      G_SPAC|T_AA,  G_SPAC|T_CDL, G_PDU|0,      G_PDL|0,      
  0|0,          0|0,          G_SPAC|T_CDL, G_CL|T_H6,    G_CL|T_MDL,   0|0,          G_SEMI|0,     G_JU|0,       
  0|0,          0|0,          0|0,          0|0,          G_SPAC|T_AA,  G_SPAC|T_GDT, G_AU|T_AAUL,  G_SPAC|T_MDU, 
  G_EU|T_AAUL,  G_HU|T_AAUL,  G_IU|T_AAUL,  0|0,          G_OU|T_AAUL,  0|0,          G_YU|T_AAUL,  G_OMEU|T_AAUL,
  G_IOTL|T_GDT, G_AU|0,       G_BU|0,       G_GAMU|0,     G_DELU|0,     G_EU|0,       G_ZU|0,       G_HU|0,       
  G_OWMU|0,     G_IU|0,       G_KU|0,       G_TVU|0,      G_MU|0,       G_NU|0,       G_XIU|0,      G_OU|0,       
  G_PIU|0,      G_PU|0,       0|0,          G_ESHU|0,     G_TU|0,       G_YU|0,       G_PHIU|0,     G_XU|0,       
  G_PSIU|0,     G_OMEU|0,     G_IU|T_DA,    G_YU|T_DA,    G_ALPL|T_AA,  G_O2L|T_AA,   G_NWLL|T_AA,  G_IOTL|T_AA,  
  G_UL|T_GDT,   G_ALPL|0,     G_BETL|0,     G_GAML|0,     G_DELL|0,     G_O2L|0,      G_ZETL|0,     G_NWLL|0,     
  G_THEL|0,     G_IOTL|0,     G_KRAL|0,     G_LAML|0,     G_MICS|0,     G_VL|0,       G_XIL|0,      G_OL|0,       
  G_PIL|0,      G_RHOL|0,     G_FSL|0,      G_SIGL|0,     G_TAUL|0,     G_UL|0,       G_PH2L|0,     G_CHIL|0,     
  G_PSIL|0,     G_OMEL|0,     G_IOTL|T_DA,  G_UL|T_DA,    G_OL|T_AA,    G_UL|T_AA,    G_OMEL|T_AA,  G_KU|T_HK1,   
  G_BETM|0,     G_THEM|0,     G_UWHM|0,     G_UWHM|T_AAUL,G_UWHM|T_DA,  G_PHIL|0,     G_PSM|0,      G_KAPM|T_HK2, 
  G_QU|0,       G_QL|0,       G_STIG|0,     G_STIL|0,     G_FU|0,       G_FWHL|0,     G_KOPP|0,     G_KOPL|0,     
  G_SAMP|0,     G_SAML|0,     G_SHEU|0,     G_SHEL|0,     G_FEIU|0,     G_FEIL|0,     G_KHEU|0,     G_KHEL|0,     
  G_HORU|0,     G_HORL|0,     0|0,          0|0,          G_MVU|T_H5,   G_MVL|T_H5,   G_DEIU|0,     G_DEIL|0,     
  G_KAPM|0,     G_RHSM|0,     G_CL|0,       G_JL|0,       G_OWMU|0,     G_LUEM|0,     G_LUEM|T_H6,  G_THOU|0,     
  G_THOL|0,     G_CU|0,       G_MU|0,       G_TWL|T_LDSC, 0|0,          G_CU|T_H5,    G_CU|T_MDU,   
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000400-0x000004FF "Cyrillic".
// Offsets in 0-253 are mapped.  
  G_EU|T_GA,    G_EU|T_DA,    G_DJEU|0,     G_GAMU|T_AA,  G_UIU|0,      G_SU|0,       G_IU|0,       G_IU|T_DA,    
  G_JU|0,       G_LJEU|0,     G_NJEU|0,     G_TSHU|0,     G_KU|T_AA,    G_PDU|T_GA,   G_2U|T_BA,    G_DZHU|0,     
  G_AU|0,       G_BWTU|0,     G_BU|0,       G_GAMU|0,     G_DEU|0,      G_EU|0,       G_ZHEU|0,     G_DIG3|0,     
  G_PDU|0,      G_PDU|T_BA,   G_KU|0,       G_ELU|0,      G_MU|0,       G_HU|0,       G_OU|0,       G_PIU|0,      
  G_PU|0,       G_CU|0,       G_TU|0,       G_2U|0,       G_PHIU|0,     G_XU|0,       G_TSEU|0,     G_CHEU|0,     
  G_SHAU|0,     G_SHCU|0,     G_HSU|0,      G_YERU|0,     G_S2U|0,      G_UIU|T_H5,   G_YUU|0,      G_RU|T_H5,    
  G_AL|0,       G_BEL|0,      G_SCBLU|0,    G_GHEL|0,     G_DEL|0,      G_EL|0,       G_ZHEL|0,     G_O2L|T_H6,   
  G_PDL|0,      G_PDL|T_BA,   G_KRAL|0,     G_ELL|0,      G_TWL|0,      G_ENL|0,      G_OL|0,       G_PIL|0,      
  G_PL|0,       G_CL|0,       G_TEL|0,      G_YL|0,       G_PHIL|0,     G_XL|0,       G_TSEL|0,     G_CHEL|0,     
  G_SHAL|0,     G_SHCL|0,     G_HSL|0,      G_YERL|0,     G_S2L|0,      G_LUEM|T_H6,  G_YUL|0,      G_YAL|0,      
  G_EL|T_GA,    G_EL|T_DA,    G_DJEL|0,     G_GHEL|T_AA,  G_LUEM|0,     G_SL|0,       G_IL|0,       G_IL|T_DA,    
  G_JL|0,       G_LJEL|0,     G_NJEL|0,     G_HL|T_SULH,  G_KRAL|T_AA,  G_PDL|T_GA,   G_YL|T_BA,    G_DZHL|0,     
  G_OM2U|0,     G_OMEL|0,     G_S2U|T_SULH, G_YATL|0,     G_IEU|0,      G_IEL|0,      G_LYU|0,      G_LYL|0,      
  G_ILYU|0,     G_ILYL|0,     G_BYU|0,      G_BYL|0,      G_IBYU|0,     G_IBYL|0,     G_KSIU|0,     G_KSIL|0,     
  G_PSIU|0,     G_PSIL|0,     G_OWMU|0,     G_OL|T_SMLH,  G_IZHU|0,     G_IZHL|0,     G_IZHU|T_DGA, G_IZHL|T_DGA, 
  G_UKU|0,      G_UKL|0,      G_ROU|0,      G_ROL|0,      G_OM2U|T_FRMT,G_OMEL|T_FRMT,G_OTU|0,      G_OTL|0,      
  0|0,          G_CL|T_HK2,   G_THOS|0,     0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          G_BL|T_SULH,  G_YATL|0,     0|0,          0|0,          
  G_GWUU|0,     G_GWUL|0,     G_GAMU|T_SULH,0|0,          G_GWMU|0,     G_GWML|0,     G_ZHEU|T_DS1, G_ZHEL|T_DS1, 
  G_DIG3|T_CDL, 0|0,          G_KU|T_DS1,   G_KRAL|T_DS1, 0|0,          0|0,          G_KU|T_SULH,  G_KL|T_SULH,  
  0|0,          0|0,          G_HU|T_DS1,   G_ENL|T_DS1,  0|0,          0|0,          0|0,          0|0,          
  G_AHU|0,      G_AHL|0,      G_CU|T_CDL,   G_CL|T_CDL,   G_TU|T_MRD,   G_TEL|T_MRD,  G_YU|0,       0|0,          
  G_YU|T_SMMH,  0|0,          G_XU|T_DS1,   G_XL|T_DS1,   0|0,          0|0,          G_CHEU|T_DS1, G_CHEL|T_DS1, 
  0|0,          0|0,          G_HL|0,       G_HL|0,       0|0,          G_EL|0,       0|0,          0|0,          
  G_IU|0,       G_ZHEU|T_BA,  G_ZHEL|T_BA,  G_KU|T_HK2,   G_KRAL|T_HK2, G_ELU|T_HK1,  G_ELL|T_HK1,  G_HU|T_HK2,   
  G_ENL|T_HK2,  G_HU|T_HK1,   G_ENL|T_HK1,  G_CHEU|T_MRD, G_CHEL|T_MRD, G_MU|T_HK1,   G_TWL|T_HK1,  G_IL|0,       
  G_AU|T_BA,    G_AL|T_BA,    G_AU|T_DA,    G_AL|T_DA,    G_AEU|0,      G_AEL|0,      G_EU|T_BA,    G_EL|T_BA,    
  G_SCHU|0,     G_EL|T_TL,    G_SCHU|T_DA,  0|0,          G_ZHEU|T_DA,  G_ZHEL|T_DA,  G_DIG3|T_DA,  0|0,          
  G_EZHU|0,     G_EZHL|T_MBLW,G_PDU|T_MA,   G_PDL|T_MA,   G_PDU|T_DA,   G_PDL|T_DA,   G_OU|T_DA,    G_OL|T_DA,    
  G_OWMU|0,     G_OL|T_SMLH,  G_OWMU|T_DA,  0|0,          0|0,          0|0,          G_2U|T_MA,    G_YL|T_MA,    
  G_2U|T_DA,    G_YL|T_DA,    G_2U|T_DAA,   G_YL|T_DAA,   G_CHEU|T_DA,  G_CHEL|T_DA,  G_GAMU|T_MRD, G_GHEL|T_MRD, 
  G_YERU|T_DA,  G_YERL|T_DA,  0|0,          0|0,          G_XU|T_HK2,   G_XL|T_HK2,   
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000530-0x0000058F "Armenian".
// Offsets in 1-95 are mapped.  
  G_AYBU|0,     G_BENU|0,     G_GIMU|0,     G_DAU|0,      G_BENU|T_VU,  G_ZAU|0,      G_EHU|0,      G_ETU|0,      
  G_TOU|0,      G_GIMU|T_VU,  G_INIU|0,     G_LU|0,       G_XEHU|0,     G_CAU|0,      G_KENU|0,     G_HOU|0,      
  G_JAU|0,      G_GHAU|0,     G_CH2U|0,     G_MENU|0,     G_YIU|0,      G_GHAU|T_TU,  G_SH2U|0,     G_UU|T_VU,    
  G_CHAU|0,     G_PEHU|0,     G_JHEU|0,     G_RAU|0,      G_UU|0,       G_VEWU|0,     G_SU|0,       G_JU|T_TU,    
  G_COU|0,      G_YIWU|0,     G_PHIU|0,     G_KEHU|0,     G_OU|0,       G_FEHU|0,     0|0,          0|0,          
  G_SPAC|T_LHRA,G_SPAC|T_AA,  _COMB_|T_AEM, _COMB_|T_AEP, G_GRAA|0,     _COMB_|T_AQM, 0|0,          G_ML|0,       
  G_ML|T_VL,    G_BENL|0,     G_GIML|0,     G_DAL|0,      G_ECHL|0,     G_ZAL|0,      G_EHL|0,      G_ETL|0,      
  G_TOL|0,      G_GIMU|T_VU,  G_INIL|0,     G_LIWL|0,     G_XEHL|0,     G_CAL|0,      G_KENL|0,     G_HL|0,       
  G_JAL|0,      G_GHAL|0,     G_CH2L|0,     G_MENL|0,     G_YIL|0,      G_NOWL|0,     G_SH2L|0,     G_NL|0,       
  G_CHAL|0,     G_TMWL|0,     G_JHEL|0,     G_RAL|0,      G_UL|0,       G_VEWL|0,     G_TIWL|0,     G_NL|T_LDSC,  
  G_GL|0,       G_GHEL|T_VL,  G_PIWL|0,     G_KEHL|0,     G_OL|0,       G_FEHL|0,     G_EYL|0,      G_YIL|T_SMLH, 
  G_COLO|0,     G_HYPH|0,     0|0,          0|0,          G_WHIC|T_MDU, G_WHIC|T_MDU, G_ARDS|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00000900-0x0000097F "Devanagari".
// Offsets in 0-127 are mapped.  
  _COMB_|T_DICB,_COMB_|T_DCB, _COMB_|T_DSAN,G_COLO|0,     G_A|T_DSSR,   G_A|0,        G_AA|0,       G_I|0,        
  G_II|0,       G_U|0,        G_U2|0,       G_VR|0,       G_V2|0,       G_E|T_DSCE,   G_E|T_DSSR,   G_E|0,        
  G_E|T_DSE,    G_AA|T_DSCE,  G_AA|T_DSSR,  G_AA|T_DSE,   G_AA|T_DSAI,  G_KA|0,       G_KHA|0,      G_GA|0,       
  G_GHA|0,      G_NGA|0,      G_CA|0,       G_CHA|0,      G_JA|0,       G_JHA|0,      G_NYA|0,      G_TTA|0,      
  G_TTHA|0,     G_DDA|0,      G_DDHA|0,     G_NNA|0,      G_TA|0,       G_THA|0,      G_DA|0,       G_DHA|0,      
  G_NA|0,       G_NA|T_DSNK,  G_PA|0,       G_PHA|0,      G_BA|0,       G_BHA|0,      G_MA|0,       G_YA|0,       
  G_RA|0,       G_RA|T_DSNK,  G_LA|0,       G_LLA|0,      G_LLA|T_DSNK, G_VA|0,       G_SHA|0,      G_SSA|0,      
  G_SA|0,       G_HA|0,       _COMB_|T_DSOE,G_DVSA|T_DSOE,_COMB_|T_DSNK,G_DESA|0,     G_DVSA|0,     0|0,          
  0|0,          _COMB_|T_DVSU,_COMB_|T_DSUU,_COMB_|T_DSVR,_COMB_|T_DSRR,_COMB_|T_DSCE,_COMB_|T_DSSR,_COMB_|T_DSE, 
  _COMB_|T_DSAI,G_DVSA|T_DSCE,G_DVSA|T_DSSR,G_DVSA|T_DSE, G_DVSA|T_DSAI,G_DESV|0,     0|0,          0|0,          
  G_DEVO|0,     _COMB_|T_DSUD,_COMB_|T_DSAU,_COMB_|T_DSLL,_COMB_|T_DSAA,_COMB_|T_DCEE,_COMB_|T_DSUE,_COMB_|T_DUUE,
  G_KA|T_DSNK,  G_KHA|T_DSNK, G_GA|T_DSNK,  G_JA|T_DSNK,  G_DDA|T_DSNK, G_DDHA|T_DSNK,G_PHA|T_DSNK, G_YA|T_DSNK,  
  G_V3|0,       G_V4|0,       _COMB_|T_DSVL,0|0,          G_DC|0,       G_LC|0,       G_OL|0,       G_DED1|0,     
  G_DED2|0,     G_DED3|0,     G_DED4|0,     G_DED5|0,     G_DED6|0,     G_DED7|0,     G_DED8|0,     G_DED9|0,     
  G_DEGS|0,     G_SPAC|T_OA,  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          G_ZHA|0,      G_HY|0,       G_GGA|0,      G_JJA|0,      G_GSU|0,      G_DDDA|0,     G_BBA|0,      
////////////////////////////////////////////////////////////////////////////////
// Data for 0x000010A0-0x000010FF "Georgian".
// Offsets in 25-95 are mapped.  
  G_HL|0,       0|0,          0|0,          0|0,          G_SU|0,       0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          G_ZU|0,       0|0,          0|0,          G_AN|0,       
  G_BAN|0,      G_GAN|0,      G_DON|0,      G_EN|0,       G_VIN|0,      G_ZEN|0,      G_TAN|0,      G_IN|0,       
  G_KAN|0,      G_LAS|0,      G_MAN|0,      G_NAR|0,      G_ON|0,       G_PAR|0,      G_ZHAR|0,     G_RAE|0,      
  G_SAN|0,      G_TAR|0,      G_UN|0,       G_PHAR|0,     G_KHAR|0,     G_GHAN|0,     G_QAR|0,      G_SHIN|0,     
  G_CHIN|0,     G_CAN|0,      G_JIL|0,      G_SHIN|T_H5,  G_CHAR|0,     G_JIL|T_H5,   G_JHAN|0,     G_HAE|0,      
  G_HE|0,       G_HIE|0,      G_WE|0,       G_HAR|0,      G_HOE|0,      G_FI|0,       G_YN|0,       G_ELIF|0,     
  G_TG|0,       G_AIN|0,      G_GEP2|0,     G_GN|0,       G_SU|0,       G_HS|0,       G_OL|0,       
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002070-0x0000209F "Superscripts and Subscripts".
// Offsets in 0-30 are mapped.  
  G_SUP0|0,     G_3L|0,       0|0,          0|0,          G_SUP4|0,     G_SUP5|0,     G_SUP6|0,     G_SUP7|0,     
  G_SUP8|0,     G_SUP9|0,     G_CSFP|0,     G_SUPM|0,     G_CSWF|0,     G_SULP|0,     G_SURP|0,     G_2L|0,       
  G_SUB0|0,     G_SUB1|0,     G_SUB2|0,     G_SUB3|0,     G_SUB4|0,     G_SUB5|0,     G_SUB6|0,     G_SUB7|0,     
  G_SUB8|0,     G_SUB9|0,     G_SUPS|0,     G_SUBM|0,     G_SUES|0,     G_SUL2|0,     G_SUR2|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002100-0x0000214F "Letterlike Symbols".
// Offsets in 2-73 are mapped.  
  G_CU|0,       G_DEGC|0,     0|0,          G_CARO|0,     G_CADU|0,     G_DIG3|T_H5,  G_UIU|T_H5,   G_DEGF|0,     
  G_GL|T_ITA,   G_HU|0,       G_HU|0,       G_HU|0,       G_HL|0,       G_HL|T_SULH,  G_IU|0,       G_IU|0,       
  G_LU|0,       G_LL|0,       0|0,          G_NU|0,       G_NUM2|0,     0|0,          0|0,          G_PU|0,       
  G_QU|0,       G_RU|0,       G_RU|0,       G_RU|0,       G_RU|T_KDS,   0|0,          0|0,          0|0,          
  G_TRMS|0,     0|0,          G_ZU|0,       0|0,          G_OMEU|0,     G_OMEU|T_VU,  G_ZU|0,       0|0,          
  G_KU|0,       G_AU|T_RA,    G_BU|0,       G_CU|0,       G_EL|0,       G_EL|0,       G_EU|0,       G_FU|0,       
  G_FU|T_TU,    G_MU|0,       G_OL|0,       G_ALEM|0,     0|0,          0|0,          0|0,          G_IL|0,       
  0|0,          0|0,          0|0,          G_YL|0,       G_GAMU|0,     G_PIU|0,      G_ESHU|T_OLN, G_GU|T_TU,    
  G_LU|T_TU,    G_LU|T_H5,    G_YU|T_VU,    G_DU|0,       G_DL|0,       G_EL|0,       G_IL|0,       G_JL|0,       
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002150-0x0000218F "Number Forms".
// Offsets in 0-59 are mapped.  
  G_VF17|0,     G_VF1N|0,     G_VF1T|0,     G_VF12|0,     G_VF2T|0,     G_VF1F|0,     G_VF2F|0,     G_VF3F|0,     
  G_VF4F|0,     G_VF16|0,     G_VF56|0,     G_VF18|0,     G_VF38|0,     G_VF58|0,     G_VF78|0,     G_FRN1|0,     
  G_DC|0,       G_LC|0,       G_RON3|0,     G_RON4|0,     G_VU|0,       G_RON6|0,     0|0,          0|0,          
  G_RON9|0,     G_XU|0,       G_RONE|0,     0|0,          G_LU|0,       G_CU|0,       G_DU|0,       G_MU|0,       
  G_IL|0,       G_SR6L|0,     G_SR5L|0,     G_SR3L|0,     G_VL|0,       G_SR4L|0,     0|0,          0|0,          
  G_SR2L|0,     G_XL|0,       G_SRNL|0,     0|0,          G_LL|0,       G_CL|0,       G_DL|0,       G_ML|0,       
  G_RN1T|0,     G_RN5T|0,     0|0,          G_CU|T_H5,    G_CL|T_H6,    G_CU|T_DS1,   G_YNU|T_VU,   G_RNFT|0,     
  0|0,          G_VF0T|0,     G_DIG2|T_TU,  G_DIG3|T_TU,  
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00002700-0x000027BF "Dingbats".
// Offsets in 0-178 are mapped.  
  G_BLS2|0,     G_BLS2|0,     G_BLS2|0,     G_BLS2|0,     G_BLS2|0,     G_CHEM|T_TMB, 0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          G_CHEM|0,     G_CHEM|T_BLD, G_MULS|0,     G_MULS|0,     G_BALX|0,     
  G_BALX|T_BLD, G_OUGC|0,     G_OUGC|0,     G_OUGC|0,     G_OUGC|0,     G_ANKH|0,     G_ANKH|0,     G_ANKH|0,     
  G_CROJ|0,     G_STOD|0,     G_CROJ|0,     G_CROJ|0,     G_CROJ|0,     G_CROJ|0,     G_BLAD|0,     G_BLAD|T_OLN, 
  G_LOZE|0,     G_BLAS|0,     G_BLAS|0,     G_BLAS|0,     G_BLAS|0,     G_BLAS|0,     G_BLAS|0,     G_BLAS|0,     
  G_BLAS|0,     G_STOD|0,     G_STOD|0,     G_STOD|0,     G_STOD|0,     G_STOD|0,     G_STOD|0,     G_STOD|0,     
  G_STOD|0,     G_STOD|0,     G_STOD|0,     G_TEAA|0,     G_TEAA|0,     G_TEAA|0,     G_TEAA|0,     G_STOD|0,     
  G_STOD|0,     G_TEAA|0,     G_STOD|0,     G_TEAA|0,     G_TEAA|0,     G_TEAA|0,     G_TEAA|0,     G_TEAA|0,     
  G_TEAA|0,     G_TEAA|0,     G_TEAA|0,     G_TEAA|0,     G_MULS|0,     G_WHIC|0,     G_MULS|T_TMB, 0|0,          
  0|0,          0|0,          0|0,          G_QUEM|0,     G_QUEM|0,     G_EXCM|0,     G_BLAD|0,     G_EXCM|0,     
  G_DC|0,       G_DC|T_BLD,   0|0,          G_APOS|0,     G_APOS|0,     G_QUOM|0,     G_QUOM|0,     G_COMM|0,     
  G_SPAC|T_DVLB,G_PILS|0,     G_HEMO|0,     G_HHEM|0,     G_BLHS|0,     G_RHBH|0,     G_RHBH|0,     G_RHBH|0,     
  G_LEFP|T_BLD, 0|0,          G_LEFP|T_VBD, 0|0,          G_MLAB|0,     0|0,          G_MLAB|T_BLD, 0|0,          
  G_MLAB|T_VBD, 0|0,          G_LESB|T_BLD, 0|0,          G_LECB|T_BLD, 0|0,          G_DIG1|T_TMB, G_DIG2|T_TMB, 
  G_DIG3|T_TMB, G_DIG4|T_TMB, G_DIG5|T_TMB, G_DIG6|T_TMB, G_DIG7|T_TMB, G_DIG8|T_TMB, G_DIG9|T_TMB, G_NTFS|T_TMB, 
  G_DIG1|T_TMB, G_DIG2|T_TMB, G_DIG3|T_TMB, G_DIG4|T_TMB, G_DIG5|T_TMB, G_DIG6|T_TMB, G_DIG7|T_TMB, G_DIG8|T_TMB, 
  G_DIG9|T_TMB, G_NTFS|T_TMB, G_DIG1|T_TMB, G_DIG2|T_TMB, G_DIG3|T_TMB, G_DIG4|T_TMB, G_DIG5|T_TMB, G_DIG6|T_TMB, 
  G_DIG7|T_TMB, G_DIG8|T_TMB, G_DIG9|T_TMB, G_NTFS|T_TMB, G_RIGA|0,     G_PLUS|0,     G_HYPH|0,     G_DIVS|0,     
  0|0,          0|0,          0|0,          G_RIGA|0,     G_RIGA|0,     0|0,          0|0,          0|0,          
  0|0,          G_RIGA|T_BLD, G_TTRA|0,     G_TTRA|0,     G_TTRA|0,     0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          G_RIOA|T_TMB, 
////////////////////////////////////////////////////////////////////////////////
// Data for 0x00003040-0x0000309F "Hiragana".
// Offsets in 1-95 are mapped.  
  G_S8L|0,      G_6|0,        G_S9L|0,      G_7|0,        G_SBL|0,      G_8|0,        G_SCL|0,      G_9|0,        
  G_SDL|0,      G_B|0,        G_K4|0,       G_K4|T_VSM,   G_K5|0,       G_K5|T_VSM,   G_K6|0,       G_K6|T_VSM,   
  G_K7|0,       G_K7|T_VSM,   G_K8|0,       G_K8|T_VSM,   G_S4|0,       G_S4|T_VSM,   G_S5|0,       G_S5|T_VSM,   
  G_S6|0,       G_S6|T_VSM,   G_S7|0,       G_S7|T_VSM,   G_S8|0,       G_S8|T_VSM,   G_T4|0,       G_T4|T_VSM,   
  G_T5|0,       G_T5|T_VSM,   G_SFL|0,      G_T6|0,       G_T6|T_VSM,   G_T7|0,       G_T7|T_VSM,   G_T8|0,       
  G_T8|T_VSM,   G_N4|0,       G_N5|0,       G_N6|0,       G_N7|0,       G_N8|0,       G_H5|0,       G_H5|T_VSM,   
  G_H5|T_SVSM,  G_H6|0,       G_H6|T_VSM,   G_H6|T_SVSM,  G_H7|0,       G_H7|T_VSM,   G_H7|T_SVSM,  G_H4|0,       
  G_H4|T_VSM,   G_H4|T_SVSM,  G_H8|0,       G_H8|T_VSM,   G_H8|T_SVSM,  G_M5|0,       G_M6|0,       G_M7|0,       
  G_M8|0,       G_M9|0,       G_SGL|0,      G_Y4|0,       G_SHL|0,      G_Y5|0,       G_SJL|0,      G_Y6|0,       
  G_R4|0,       G_R5|0,       G_R6|0,       G_R7|0,       G_R8|0,       G_SLL|0,      G_W3|0,       0|0,          
  0|0,          G_W4|0,       G_C|0,        G_8|T_VSM,    G_SML|0,      G_SNL|0,      0|0,          0|0,          
  _COMB_|T_VSM, _COMB_|T_SVSM,G_SPAC|T_VSM, G_SPAC|T_SVSM,G_HIIM|0,     G_HIIM|T_VSM, G_HIDY|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x000030A0-0x000030FF "Katakana".
// Offsets in 0-95 are mapped.  
  G_EQUS|0,     G_SAL|0,      G_2|0,        G_SIL|0,      G_3|0,        G_SUL|0,      G_4|0,        G_SEL|0,      
  G_5|0,        G_SOL|0,      G_O|0,        G_K2|0,       G_K2|T_SVSM,  G_KI|0,       G_KI|T_SVSM,  G_K3|0,       
  G_K3|T_VSM,   G_KE|0,       G_KE|T_VSM,   G_KO|0,       G_KO|T_VSM,   G_S2|0,       G_S2|T_VSM,   G_SI|0,       
  G_SI|T_VSM,   G_S3|0,       G_S3|T_VSM,   G_SE|0,       G_SE|T_VSM,   G_SO|0,       G_SO|T_VSM,   G_T2|0,       
  G_T2|T_VSM,   G_TI|0,       G_TI|T_VSM,   G_S3L|0,      G_T3|0,       G_T3|T_VSM,   G_TE|0,       G_TE|T_VSM,   
  G_TO|0,       G_TO|T_VSM,   G_N2|0,       G_NI|0,       G_N3|0,       G_NE|0,       G_NO|0,       G_H2|0,       
  G_H2|T_VSM,   G_H2|T_SVSM,  G_HI|0,       G_HI|T_VSM,   G_HI|T_SVSM,  G_H3|0,       G_H3|T_VSM,   G_H3|T_SVSM,  
  G_H4|0,       G_H4|T_VSM,   G_H4|T_SVSM,  G_HO|0,       G_HO|T_VSM,   G_HO|T_SVSM,  G_M2|0,       G_MI|0,       
  G_M3|0,       G_ME|0,       G_M4|0,       G_SYL|0,      G_Y2|0,       G_S4L|0,      G_Y3|0,       G_S5L|0,      
  G_YO|0,       G_R2|0,       G_RI|0,       G_R3|0,       G_RE|0,       G_RO|0,       G_SWL|0,      G_WA|0,       
  G_WI|0,       G_W2|0,       G_WO|0,       G_N|0,        G_4|T_VSM,    G_SKL|0,      G_S6L|0,      G_WA|T_VSM,   
  G_WI|T_VSM,   G_W2|T_VSM,   G_WO|T_VSM,   G_BULL|0,     G_HYPH|0,     G_KAIM|0,     G_KAIM|T_VSM, G_LU|T_TL,    
////////////////////////////////////////////////////////////////////////////////
// Data for 0x000031F0-0x000031FF "Katakana Phonetic Extensions".
// Offsets in 2-6 are mapped.  
  G_S7L|0,      G_SPL|0,      G_SQL|0,      G_SRL|0,      G_SVL|0,      
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0000A4D0-0x0000A4FF "Lisu".
// Offsets in 0-47 are mapped.  
  G_BU|0,       G_PU|0,       G_PU|T_TU,    G_DU|0,       G_TU|0,       G_TU|T_VU,    G_GU|0,       G_KU|0,       
  G_KU|T_TU,    G_JU|0,       G_CU|0,       G_CU|T_H5,    G_ZU|0,       G_FU|0,       G_FU|T_TU,    G_MU|0,       
  G_NU|0,       G_LU|0,       G_SU|0,       G_RU|0,       G_RU|T_TU,    G_TVU|0,      G_VU|0,       G_HU|0,       
  G_GU|T_TU,    G_JU|T_TU,    G_WU|0,       G_XU|0,       G_YU|0,       G_BU|T_TU,    G_AU|0,       G_AU|T_VU,    
  G_EU|0,       G_EU|T_H5,    G_DC|0,       G_OU|0,       G_UU|0,       G_UU|T_VU,    G_LU|T_TU,    G_DU|T_H5,    
  G_FULS|0,     G_COMM|0,     0|0,          0|0,          G_SEMI|0,     G_COLO|0,     0|0,          G_EQUS|0,     
////////////////////////////////////////////////////////////////////////////////
// Data for 0x0000FB00-0x0000FB4F "Alphabetic Presentation Forms".
// Offsets in 0-6 are mapped.  
  G_FFL|0,      G_FIL|0,      G_FLL|0,      G_FFIL|0,     G_FFLL|0,     G_LSTL|0,     G_STL|0,      
};

// Blocks have been packed in this order:
//  0 IPA Extensions (sparse)
//  1 Spacing Modifier Letters (sparse)
//  2 Cyrillic Supplement (sparse)
//  3 Latin Extended Additional (sparse)
//  4 Greek Extended (sparse)
//  5 General Punctuation (sparse)
//  6 Currency Symbols (sparse)
//  7 Arrows (sparse)
//  8 Mathematical Operators (sparse)
//  9 Miscellaneous Technical (sparse)
// 10 Geometric Shapes (sparse)
// 11 Miscellaneous Symbols (sparse)
// 12 Supplemental Arrows-B (sparse)
// 13 Miscellaneous Symbols and Arrows (sparse)
// 14 Latin Extended-C (sparse)
// 15 Cyrillic Extended-B (sparse)
// 16 Latin Extended-D (sparse)
// 17 Latin Extended-E (sparse)
// 18 Miscellaneous Symbols and Pictographs1 (sparse)
// 19 Miscellaneous Symbols and Pictographs2 (sparse)
// 20 Miscellaneous Symbols and Pictographs3 (sparse)
// 21 Supplemental Arrows-C (sparse)
// 22 Basic Latin 
// 23 Latin-1 Supplement 
// 24 Latin Extended-A 
// 25 Latin Extended-B 
// 26 Greek and Coptic 
// 27 Cyrillic 
// 28 Armenian 
// 29 Devanagari 
// 30 Georgian 
// 31 Superscripts and Subscripts 
// 32 Letterlike Symbols 
// 33 Number Forms 
// 34 Dingbats 
// 35 Hiragana 
// 36 Katakana 
// 37 Katakana Phonetic Extensions 
// 38 Lisu 
// 39 Alphabetic Presentation Forms 

// Starting offset into codepoint_map for each included block:
static const unsigned int bstart_indecies[] PROGMEM = {  0, 30, 49, 65,223,228,
267,280,328,374,385,429,470,484,524,536,561,611,616,622,656,728,786,881,977,
1105,1313,1456,1710,1805,1933,2004,2035,2107,2167,2346,2441,2537,2542,2590,};

// Within each included block, offset to first mapped codepoint:
static const byte first_offsets[] PROGMEM = {  1,  9,  0,  2,189,  2,  7,  0,
  0, 16,  0,  5, 12,  1,  3,  4,  6,  2,148, 70,  6,  5, 32, 32,  0,  0,  0,  0,
  1,  0, 25,  0,  2,  0,  0,  1,  0,  2,  0,  0,};

// Within each included block, offset to last mapped codepoint:
static const byte last_offsets[] PROGMEM = { 79, 72, 47,255,254, 90, 31,110,255,
122, 94,230, 77,239, 22, 87,221, 42,246,222,249,147,126,127,127,207,142,253, 95,
127, 95, 30, 73, 59,178, 95, 95,  6, 47,  6,};

// List which codepoints (relative to start of block) sparse blocks contain:
static const byte sparse_indecies[] PROGMEM = {  1,  2,  4,  8,  9, 11, 12, 15,
 18, 19, 24, 25, 26, 31, 32, 33, 36, 37, 40, 48, 49, 59, 61, 63, 66, 68, 72, 73,
 76, 79,  9, 11, 12, 22, 23, 24, 25, 26, 27, 32, 39, 40, 41, 42, 43, 44, 45, 68,
 72,  0,  1, 12, 13, 16, 17, 26, 27, 28, 29, 36, 37, 38, 39, 46, 47,  2,  3,  4,
  5,  6,  7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 30, 31, 32,
 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54,
 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84,
 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99,106,107,108,109,110,111,112,
113,114,115,116,117,118,119,124,125,126,127,128,129,130,131,132,133,134,135,136,
137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,
158,159,160,161,162,163,184,185,186,187,188,189,200,201,202,203,204,205,206,207,
228,229,230,231,242,243,244,245,246,247,248,249,252,253,255,189,190,191,253,254,
  2,  3,  4,  5,  6,  7,  8,  9, 10, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28,
 29, 30, 31, 32, 33, 34, 36, 38, 39, 48, 49, 50, 53, 57, 58, 60, 61, 75, 90,  7,
  9, 10, 12, 14, 16, 19, 24, 25, 26, 29, 30, 31,  0,  1,  2,  3,  4,  5,  6,  7,
  8,  9, 14, 15, 16, 17, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44,
 45, 46, 47, 48, 49, 50, 51, 52, 64, 66, 69, 80, 81, 82, 83, 87, 88, 99,109,110,
  0,  1,  2,  3,  5,  6,  7,  8, 10, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25,
 26, 30, 31, 35, 37, 40, 41, 42, 43, 44, 54, 72, 96, 97,100,101,153,164,165,179,
193,194,195,196,197,255, 16, 32, 33,115,116,117,118,119,120,121,122,  0,  1, 12,
 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 39, 40, 42, 43,
 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 70, 79, 84, 85, 86, 87, 91, 92, 93,
 94,  5,  9, 16, 17, 18, 37, 38, 39, 40, 41, 58, 59, 60, 64, 66, 96, 97, 98, 99,
100,101,102,103,105,106,107,108,112,113,134,135,136,137,160,170,171,172,219,228,
229,230, 12, 13, 14, 15, 16, 17, 43, 44, 64, 65, 74, 75, 76, 77,  1,  4,  6,  9,
 12, 13, 36, 37, 38, 41, 55, 56, 96, 97, 98, 99,106,107,108,109,137,138,139,152,
153,154,155,156,157,158,159,193,197,198,199,200,236,237,238,239,  3,  7,  8,  9,
 10, 11, 12, 14, 15, 18, 21, 22,  4,  5,  7, 10, 11, 12, 13, 22, 23, 28, 30, 40,
 41, 42, 43, 44, 45, 46, 62, 64, 65, 66, 67, 86, 87,  6,  7,  9, 11, 17, 32, 33,
 34, 35, 40, 41, 42, 43, 46, 47, 78, 79, 80, 88, 96, 99,101,104,105,106,107,108,
109,111,112,113,116,117,120,127,139,144,145,146,147,148,149,150,151,164,166,218,
219,220,221,  2, 13, 30, 34, 42,148,156,157,167,245,246, 70, 71, 72, 73, 77, 78,
123,126,128,137,142,147,148,149,150,151,152,153,154,155,156,157,158,159,160,178,
180,185,189,190,191,192,199,222,  6,  7,  8,  9, 10, 27, 28, 29, 52, 53, 54, 55,
 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 71, 72,104,105,106,123,124,125,126,
127,128,129,146,147,151,152,153,154,155,156,157,158,159,160,161,162,163,164,170,
171,172,197,198,199,200,201,202,203,204,205,206,207,208,209,210,244,245,246,249,
  5,  6,  9, 10, 20, 21, 22, 23, 25, 26, 29, 30, 36, 37, 38, 39, 41, 42, 45, 46,
 49, 50, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83,
 84, 85, 86, 87, 88, 89,104,108,109,110,111,118,126,134,144,145,146,147,};

// Where does included-codepoint list start within sparse_indecies?
static const unsigned int sparse_offsets[] PROGMEM = {  0, 30, 49, 65,223,228,
267,280,328,374,385,429,470,484,524,536,561,611,616,622,656,728,};

// For sparse blocks, how many glyphs are included?
static const byte sparse_nmapped[] PROGMEM = { 30, 19, 16,158,  5, 39, 13, 48,
 46, 11, 44, 41, 14, 40, 12, 25, 50,  5,  6, 34, 72, 58,};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Packed glyph bitmap data
// We store glyphs in a collection of bitmaps. Each bitmap is associated with
// a group of glyphs of a given size. For example, upper case and lower case
// letters are stored in separate bitmaps. Each bitmap concatenates glyphs
// horizontally, into a short, fat image that contains a single row of
// characters. Each row of pixels is then packed as a bit vector, and the bit
// vectors for each row are interleaved. The packed bitmap data for each group
// are then concatenated. To find the correct bitmap of a given glyph index,
// `group_bitmap_offsets` will tell you where in `bitmap_data` each bitmap
// starts. `group_startidx` tells you the starting glyph index for each group.
// `group_nglyphs` tells you the number of glyphs in each group. The arrays
// `group_rowstart`, `group_nrow`, `group_colstart`, `group_ncol` indicate
// where within the 6x12 character the glyph bitmap should be drawn. (Most glyph
// bitmaps do not store the full 6x12 image, there is a lot of empty space.)
#define NGLYPHS (806)
#define NGROUPS (32)
static const byte bitmap_data[] PROGMEM = { 14, 27, 31, 27, 27, 23, 21, 27, 14,
 31,  8,  4,  5,  2,  5,223, 49, 62, 48,207,249,132,252,196,185, 26, 26, 26, 58,
215,157,163,163,163,156,120,128,112, 12,247,158, 81, 81, 49, 49,168, 41, 41, 86,
198,248, 37, 66,133,248,193, 80,208, 30,193,254, 33, 39, 37, 54,201, 37, 35, 37,
201,190,133,153,133,185, 24, 56, 90,157, 24,175,147,147,147,237, 75, 72, 72, 72,
120,142,145,145,137,254, 57,212,212, 68,171, 21,186,232,165, 63, 93, 66, 78, 66,
221,168,168,112,168,171, 43, 42,234, 42, 46, 17, 17, 17,145,253,120, 88, 63, 24,
 24,  9, 21, 21, 19, 51, 46, 48,254, 49, 49, 49,254,144, 16, 57, 70, 70, 70,185,
 17, 18, 82,182, 21, 21, 24,224, 32, 35, 35, 35, 39,219,120,129,129,113, 33, 65,
249, 32, 36,228, 38, 42, 49,209, 32, 32, 25,134,134,134, 57, 18,162,167, 74,170,
170, 23,157,  2, 30, 34, 34, 34, 29,  1,  2,  2,  2,  2,  2,  2,196, 32, 36,164,
 36, 36,196,253, 18, 18, 18, 18,146, 29,239, 17,  2,228,  8, 24,231,208, 17, 63,
 18,213, 89,208,115,140,140,124, 11, 16, 99,194, 36, 36,200, 40, 48,223, 25, 34,
 66,249, 70, 70, 57, 32,  4, 35, 32, 67,132,112,226, 98, 92,212, 84, 72,200,227,
 20, 12, 11, 12, 20,227,231, 41, 49,241, 49, 41,231,  7,132,132,255,132,132,127,
 31, 24, 24,252, 16, 24, 23,191, 73, 73,  9,  9,  9, 63,139, 76, 44, 28, 44, 76,
140, 62, 34, 34,162, 98, 98, 34, 70,230,230,214,207,207, 70, 23, 24, 24,248, 24,
 24,247,162, 98, 18,158, 99, 99,158, 35, 36, 36, 35, 32, 36,251,142,145, 81, 81,
 81, 49, 49,168, 40,125, 85, 85, 86,198, 72, 69, 69, 66,165,165, 24, 62,  2,132,
 72,144, 32, 63,  0,117,  2, 33,114, 37,  0,253, 37, 39,253, 37, 38,254, 57,198,
198,253,192,192, 59,247, 40, 72,143, 72, 40,247, 29, 34, 32, 16,  8, 16, 63,217,
105,105,105,169,169,217, 59, 37, 77, 85, 93,133,131,198,206,205,213,229,228,196,
240, 16, 16,160,160, 64, 79,127, 65, 65, 92, 64, 64,254, 36,116,172,172,172,116,
 39,100, 68, 46, 53, 53, 53,213, 71, 41, 42, 50, 18, 18,141,226, 50, 18,242, 26,
 61,224,107,170,170,156,156,170,171, 28, 52, 36,116, 84, 84,143,240,176,176,254,
 49, 49, 49, 62,198,198,190,134,134,  6, 69,170,170,168,152,152,149,  2,  2,158,
 66, 82, 82,141,194, 66, 71, 74, 74, 74, 49,169,202,206,169,202,235,220, 50, 74,
 74,146, 18, 34,  3,  0, 66,130,250,135, 66,  0,  0, 32,146, 75,134, 94,  0,128,
129,162,149,251, 21, 33,  4,206, 53, 36,164,148,156,  0, 17, 18,150, 26, 17,  3,
  0, 66,128, 90,133, 66,  0,128, 72, 88,127,152,  8,128, 33, 34, 82, 82,139,138,
249, 63,160,163,172,176,172, 35,201,202,202,202,202,202,237,222, 18, 20,152, 24,
 24,214, 98, 99, 99,126,107,115, 98, 75,172,172,172,107, 41,207,165,165,165,169,
177,177,189,183,198,230, 87, 86, 86,167,  5,250,234,235, 75, 75,  5,  0,  3,142,
126,142,  2,  0,  0,113,138,140,138,113,  0, 14,155,245,255,213,223, 14,  0, 16,
127,255,253, 57, 16, 32, 50, 85, 72,138,133,  0,  0,  2,140,252, 12,  2,  1,  0,
 33, 96,175, 50, 33,  0,  0, 36,196,223,142,132,  0, 16, 58,125, 17,184,124,  0,
  2, 50,114,114,250, 55,  2,  0, 30,254,254,253,  4,  4,  0,113,115,255,115, 33,
  0,  0,224, 14,159, 78, 36,  0,  0,  3,  3,  2,  2,  2,  0,  4,132,142,145,145,
145,145,241, 14,  0,  0,  0,  0,  0,  0,  0,  3,  0,228, 47, 52, 44,230, 37, 62,
 36,121, 70, 70, 70,249, 64, 64, 64, 17, 17, 17, 49,215, 17, 17, 22,127, 73,201,
 73, 76, 64, 64, 72,196, 34, 33, 33, 34, 32, 32, 56,142,130,130,130,207,162,162,
194, 10,138,138,138, 14, 10, 10, 51,239, 82, 86, 90,239, 66, 66, 66,140, 83, 83,
 83,204, 70, 66,140, 97,146,146,202,163,146,146, 97,206, 49, 49, 49,222, 16, 18,
 13, 57, 70,198,166,139, 10, 18, 34,224,231,248,250,236,239, 68, 66,  0,  0,  1,
  1,  0,  0,  0,  0, 32, 36, 68, 66,130,130,  2,  2,  4,  4,128, 24,  8,  8,  8,
  8,137,  9, 10, 26,  1,194, 66, 66, 66, 50, 67, 64, 64,194,  2,  4,132, 68, 68,
 92,132,  4,  4, 24,  1,  9,107,141,141, 77, 43, 73, 73, 49,  8,  8,198, 33, 33,
193, 65, 34, 44,207, 17, 17, 56,212, 84, 84, 84,144, 16, 17,  0, 18, 23, 42,162,
194, 66,202,167, 34,  0,  8,  9, 31, 30, 62, 30, 30,  8,  9, 14, 17, 14, 14, 31,
 31, 31, 30, 14,  2,  2,  8,  6,  1,110,129,  1,  0, 32,207, 56,132,133,137, 17,
188,  7,  4,132,156,109, 69,197, 25, 16,  8,  4,194,143, 84, 36, 36, 68,127, 98,
132,  8, 16,178,177,132,132, 37, 30,  6,  6,232, 24, 25,121,149, 21,198,  8, 16,
 32, 96,254,120, 33, 34,100,132,255,  3,  4,  8, 15,  8, 15, 24, 16,  8,132,148,
 20,255,130, 66,171,170,102, 66,255, 67, 66, 83, 90, 83, 82,255,160, 32, 44,170,
186, 32,255,195,164, 35, 32,199,  4,255, 65, 66, 81,120, 65, 65,255,  8, 40,172,
154, 10, 10,255,136, 75, 76,233, 42, 11,255,  0, 80,168,168, 81, 65,255,  0,128,
 18,255, 18,128,  0,  0,130,245, 11,245,130,  0,  0, 36,109,254,109, 36,  0,  4,
 12, 31, 63, 31, 12,  4,167, 40, 40, 73, 70,224,143,121,  5, 33,125,145,124, 10,
 80,148,146,145,208,145,146,156, 66, 80, 80,127, 72, 72, 33, 66,116, 80, 96,248,
 64,142, 65, 77,233, 74,159,234,117, 20,  4,233,  8,188,  9,227, 20, 20, 99,145,
 23, 18,154, 22,122,146,146, 58,146, 33, 93,239, 73,232, 73,233, 36, 72, 80,145,
145,255,132,161, 46,114, 18,158,107,  8, 33, 66,132,136,152,239, 66,196,  8, 16,
148, 84, 63,148,224, 17, 82,148,252, 17, 16, 35, 84,136,148,241,158,196,132,  8,
144, 16,127,128, 57,129,130,250,167,162,255,130,  0,  0,  1,  0,  0,  1,  0,  4,
  4,  2,  2,  2,  1,  1,  2,  2,  2,  4,  4,  0,138,138,138,  0, 56,128,  0,  0,
  0,  0,  8, 37, 18,  0,146,108, 64,128,  0, 57, 10, 18, 33, 24, 67, 68, 67, 68,
 99,  0,136, 28,136,  0, 32, 83, 80, 83, 32,  2,  2,194, 64, 66, 25, 33, 57,  9,
 57, 38, 73, 71,129,230, 28, 20, 28,148, 28,  3,  4,119,  4,  3, 68,130,130,130,
 68,  0, 40, 40, 24,  0,  0,  1, 66,  2,  0,124,  0,128,  0,  0, 32, 80, 90, 80,
 32,196, 68,132,  4,198, 25, 32, 24, 33, 24,100,132,231, 37,229,152, 36, 28,  4,
152,112, 81,113, 82,115, 12,144,220,146, 12,  0,  0, 57,  0,  0, 64, 39, 32, 39,
 64,  4,  8,136,136,132,  0,  0,  3,  2,  3,207,192,207,237,213,237, 15, 15, 15,
251, 37,253, 53,251,133,  6,125,134,133,255, 88, 91, 84, 91,253,101,221, 69, 71,
235,170,185,168,232, 49, 82, 95, 81,222,247,215,191,149,149, 92,242,167,162, 76,
123,251,174,106,210,237,254, 90,156,239, 46,213, 49,149, 78,101,164,198,205,182,
235, 26, 26,138, 70,148, 99, 99, 98,156,114, 12,125, 13,114,221, 55,121, 49,205,
 41, 86, 87, 86, 41,  1,  1,  1,  1,  7,198, 72,144,140, 80, 50, 44, 64, 65,249,
212,213,214,214,252,  8,234, 90, 90, 26,167, 32,161,189, 35, 35, 99,164, 32, 35,
 36,169,250, 36,  3,  0, 17,255, 41, 41, 41, 47,  0, 66,255,213,213,213,213, 64,
130,239,216, 88, 88,104,  8, 16,146, 82, 79, 67,159, 10,  9,123, 13, 75, 72, 59,
  8,  8, 30, 41, 41, 41,238,225,161,187,165,165,165,184, 23, 16,212, 84,148, 20,
227, 28,  4, 68, 69, 69, 69,196,254, 10, 18, 34, 66, 66, 57,255, 33, 66,196, 62,
 34,196,  9,252,136, 56, 73,201, 56,135,120,168, 87, 84, 84,227,156, 98, 98, 33,
 97, 99,156,  3, 68,148,170,172,172,115, 14,241, 81, 40, 48, 48,200, 57,196,192,
 78, 82, 82,253,231,  8, 40,216, 90, 90,237,144, 79,  5,162,107,107,148,115,140,
143, 76,140,140, 76,202, 36, 10,145, 17, 49,238,185, 10, 58, 69,198,198,187,225,
 34, 68,  4,244, 84, 84,  0,  1,  1,  1,  1,  1,  1,202, 42, 63,170,223, 74,202,
  2, 17, 87,186, 84, 16,  1,  0, 34,  2, 15,  2, 34,  0,196,132,128,192,128,132,
  0,  7,136,112, 83,112,136,  7,  4,228, 31,228, 59, 74,241,128,189,128,153,165,
165,152,  0, 71,  8,232,  8, 71,  0,154, 98, 98, 98, 98, 98,162, 55, 81, 33, 87,
 81,137,143,106, 42, 42, 42, 42, 42, 42,185,198,198,186,198,198,199, 64, 64, 64,
 79, 80, 80,240,112,146,166,170,179,165,135,238,174,174,126, 42, 42, 43,242,178,
178,174,162,162,175,187,202,202,186,138,138,142,228, 26, 26, 27,250, 26,228,114,
 75,203,159,138, 10, 50,237,237,239,186,170, 73, 73,181,245,127,106, 42,113,191,
187,215,197,197,198, 86, 59, 96,144,208,144,159,152,144,209,208, 48, 16, 18, 82,
140,123,  8,  9, 10,250, 10,  9, 47,161,161,161, 41, 41,198,133,134,198,207,182,
134,133,228, 26, 26, 26,171,112,208, 32,161,109,179, 34, 34,  3,182, 73,112,128,
139,142,114,222, 49, 49, 42, 38, 38, 57, 56,197,193,189, 65, 73,179,199,120,128,
  0, 25, 22,225,224, 96, 40,169,107,107,156, 79, 75,203, 76, 76, 76, 51,216, 40,
 14,233, 73, 72,136,  5,134,  6,  5, 62,  6,  5,225, 95, 81, 71,233, 89,102,220,
 83, 83, 67,222, 66, 66, 51, 72, 72, 80,231, 16, 32,142, 73, 73, 73, 73, 72,120,
107, 54, 38, 38,166,132,  4,238, 20,110, 20, 94, 36,131, 33,169,125, 41,171,101,
177, 53, 76, 77, 37, 21, 13,246,194, 32, 32, 80,128, 64,  2, 37, 38, 38, 37, 36,
 25,  0, 37,  0, 37, 37,101,165,117,178,146,122,210, 70,202, 78,202,170,173,143,
173,175,157,156,194,135,193,143,130,252,176,192, 85,168, 81,208, 35,  8,136,117,
143,245,143,242,157,228,134,204,135,140,133,152,145, 72,171,148,204,203, 53, 53,
181,181,181,181,181,201,201,223,214,214,214,214, 90, 90, 36, 36, 36, 90, 90, 85,
 85, 85, 85, 85,  1, 85, 77, 77,173,173,173,  0, 13,178,178, 53,181,181,  0, 48,
 86,214,201,214,214,128, 64,119,154, 58, 90, 58,154,119, 14,150,107, 47, 43, 22,
206,  1,251,253,249,249,249,  1,  0,  0,230, 41, 41, 38,  0,  0,100,153,  0,228,
 24,  0,  0,241, 15,242, 15,244,  0,  0,190,226,226,226,190,  0,136,115, 87,255,
 39, 35,  0,142, 36,149,223,149, 36,142,144,186,144, 57, 40, 58,  0, 51, 50, 35,
 42,236, 46,224,190,182,254, 84,212,136,136, 83, 34,174,116,174, 34, 83, 38, 47,
239,126,111,175,166, 58,198,197,237,197,196, 56,181,170,186,159,186,170,229,119,
246,246,226,227, 98,156, 85,119,223,174,255,253,115,  0,196,234,113,177,206,  0,
124,125,127,127, 87, 85,120, 12,130,221,181,181,181,221,146, 14, 32, 64,101,116,
116,108,109, 36, 36,  3, 68, 72,200,  6,  4, 24,233,  6,  8,  8,  8,152,105,107,
 99,148,  8,  0,129,146, 97, 72, 80, 32, 31,  0, 16,208, 60, 82,145, 17, 17, 49,
210, 16, 17, 18, 16, 16, 85,126, 18,129,  0, 68,249, 25, 25, 23, 17, 17, 23, 34,
 34,255, 83, 83, 83, 83, 83, 95,132,132,255,170,170,170,170,170,170,142,  1, 70,
168,166,168,167,162, 77,  0, 41,213,197,198,170,130,184,184,132, 72,232, 88, 84,
 83,144, 16,239, 66, 66, 98, 99, 99,103,219, 66, 66,128,128,182,205,141,141,140,
  8,  8,152,136,206,169,169,169,169,136,136, 16, 56,214, 86,210, 58,149, 20, 24,
132,137,138,138,141,226,145,158,106, 16,  8,206,214, 32,160, 32, 34,220,114,137,
139,140,116, 83,140,140,139,  8, 16,208, 40, 40,222, 57, 33,193, 49,201,199,103,
 84, 84, 84, 36,  4, 71,136,128, 65, 33,114,146,148,100,220, 34,162,162, 42,234,
 28,  8,  8, 17, 34, 33,108,171,170,170,115,  0,206, 49, 49,162,100, 40, 40, 38,
  0,  1, 38,152,133,134,198,198,186,128, 78, 64, 78, 74, 78, 69, 69, 68,196,  0,
112,246,166,164,164,253,165,188,112,140,135, 68, 36, 20, 15,136,112,198, 73,136,
  4,226,161,169,166,160, 51, 66, 78,102, 39, 70,126,  6,  6,  6,  7,  7,  1,  1,
  1,  7,  7,  6,252, 20,221, 38, 44,215, 37,199,  0,  1, 56,205,245,244,204, 57,
208, 16,151, 90,220,154,152,103,157, 99, 98,100,248, 84, 72,148,241,146,114, 18,
 57, 18, 18, 17,193, 33, 33, 33, 65,129,223, 80, 90,231,198,198, 61,  8, 17, 96,
231, 24, 24, 24,231,146,146, 97,156, 99, 99, 99,252, 96, 98,156,115,140,132,100,
131,128, 64, 39,202, 49, 53, 53,171, 34, 36, 40, 37,198,198, 69, 60,  5, 36, 24,
231, 24, 24,214, 24,214, 24,214,192,129, 77, 82, 83, 78,131, 30,231,160,236, 21,
 37, 93,139, 25, 92,148,245,  2, 36,235,177, 35, 18,162,255, 34,  8,255,136, 17,
165,170,170,165,245,170,170, 69, 82, 82, 82, 82,215, 66, 82,133,172,170,170,170,
250, 42,170, 82, 53, 53, 53, 53,191, 53, 53, 90,255,197,197,197,199,197,229,188,
239,184,255,248,255, 24, 28,231,  0,  1,  1,  1,  1,  1,  1,  0,  0,132,132,132,
132,  4,132,132,132,132,  4,  4,132,188,196,196,204, 52,  4,132,  2, 68, 68, 68,
244, 68,244, 64, 64, 68, 24, 32, 46,162,163,162,179,130,130,224, 67,132,205,236,
236,220,222, 72,  0,132,  8,144, 21,213, 53, 53, 51, 32, 32,208,  0,  8, 17, 16,
 32, 60,  8,136,144,147, 64,132, 20, 25, 25, 57,218, 22, 20, 19, 16,160,165, 37,
165,157,  4,  4, 30,  4,115,140,140,132, 68, 92, 47,252, 36, 36, 14,209, 49, 44,
208, 16,220, 50, 34,196,  0, 40, 41, 41, 43, 41, 43,169, 41, 40,  0,242, 82,242,
 34, 66,130,127, 82,114,  0, 79,219,119,108,250, 68, 79,218,110,248, 33,115,172,
 36, 35, 36,172,115, 33,  0,200, 92, 74, 72,107, 45,105, 65,193, 40, 85,213, 41,
145,155,170, 47,197, 69,  0,226,232, 71, 13, 74,237,247,248,226, 64, 92,220,136,
128,136, 28, 63,191, 20,  4,  4,  7,  4,  4,  4,  5,  5,  7,  1,144,144, 28, 20,
181, 66,132, 74, 82, 66, 99, 67,192,113, 86, 89, 16, 44, 81,142, 16,140,  7,160,
 83, 84, 20, 19, 20,164,  3, 81,246,  0,  0,123, 99,227, 83, 11, 10, 50, 35,221,
 32, 32, 68,133,238, 20, 32, 81,145, 17, 31, 44,176,188,180, 61, 66,132, 74, 82,
 66, 99, 49, 66, 50, 66,181,  8,144,169, 74,  8,140,198,  8,198, 72,214, 33, 67,
164, 41, 34, 49, 24, 33, 24, 72,187,  4,206, 18,229,  8,198, 99,132, 99, 41,247,
 33, 66,165, 56, 41, 40,156,148,156,164, 89,130,100,138,242, 34,227,115, 82,115,
208,119,  8,145, 42,200,  8,140,206, 74,206, 90,239, 66,181, 74,113, 18,113, 57,
 41, 57, 41,123,132, 10,149,164,136,206, 96,128, 96,136,112, 32, 81,170, 44, 40,
 16,162, 68, 68, 68, 68, 68, 68, 68, 68, 68,136, 16, 17, 57, 41, 69, 17,125, 57,
 57, 17, 18,  7,  2,  7,  5,  5,  7,  7,  7,  2,  2,  2, 40, 68,195, 64,224, 16,
 20,152,145, 33,113, 34, 34, 35,113, 70, 72, 82,208, 84,120, 33, 34, 35, 56, 71,
132,  7, 36,231, 52, 36,169, 61,  9,145, 98, 68,143,242,  0,  0,  0,  0,  0,192,
160,192,192,224,159,137, 22,134, 39, 39,148,211, 52, 68,243,  0,247, 26,214, 12,
  4,110,164,232, 40, 41, 10,234,  9,136,146, 85,117,213,174,144,184, 87, 94, 63,
 20,161, 55, 33,225, 55, 33, 82,107,141,196,136,136, 33, 74, 74, 75,232, 74,226,
132,140,148,144,223, 27,144, 20, 24, 60, 17, 48,207,128, 64,  0,247,199,  8, 16,
 33, 33,161,127, 66, 66,122, 66,123, 17, 63,177,113, 49, 63,  0,172,144, 40, 32,
 60,  0,116, 20, 53, 85, 21,  0,  0,  0,  0,  0,  0,  8,148, 18, 10, 18,  8,255,
 73, 74,230, 65, 98, 65,255,129,178,201,137,144,136,255, 28, 32,152,  4,172,  8,
255,196, 39,164,197,167, 36,255,152,161,242,138,187,161,255, 16,150,156,150, 16,
 16,255,207, 32, 32, 32,199,  4,255,129,130,186,168,169,169,255, 20,146,146, 18,
156, 16,127, 11,204,169, 42,234,  9,252, 65, 65,113, 72, 73, 73,255, 16, 28, 26,
150, 20, 16,255, 68, 36,165,103,  5,  5,255, 66,114, 74, 75, 90, 66,255, 16, 16,
 28, 18,154, 22,255,202, 74,137, 79,202, 10,255, 64,114, 73,120, 81, 81,255,158,
 16, 20,150,148, 20,255,247, 20,247, 22,150,148,255, 35, 50, 63, 62, 62, 50, 35,
  8, 44, 47, 47, 47, 44,  8,162,229, 65,129,233,  9,229, 41,204,204, 56,  9,220,
  9,166,190, 84,117,225, 91, 65, 53,247,103,173, 20,  6,196, 82,156,173,191,117,
 41, 33,142, 82, 87,106,194, 39,162,144,184,209, 86, 93, 52, 16,117,130,177, 81,
 23,193, 49,134,136, 18, 82,150, 10,194,209, 90, 91, 82,115, 25, 19, 70,104, 72,
 73,206,100, 79,112, 49,150,110,  9, 60,  8, 66,130,147,162,196,248,136,  2,196,
  8,  8, 62,201,  8, 65, 37, 83, 74,132,135,249, 12,227, 40, 70, 64,140,131,  6,
 75, 81, 33,176, 72, 68, 76, 66, 34,162, 63,226, 23, 76, 80, 96, 96,127, 65, 28,
 27, 45, 73,  9,  9,  9,  9,  3,  4,  8, 16, 16,  2,  1,  0, 24, 12, 16,136,132,
 28, 16,255,  0, 12, 68, 69,104,202,101, 68,255,130, 65,130, 81,138,137,169, 80,
255,  0,132, 32,170, 32, 44, 58, 32,255,  0,231,  3,196,166, 97, 71,  4,255, 88,
 85, 89,121, 49, 17,125, 17,  3,194, 69,206, 68,207,132,207,132,  0,  3,196, 17,
241, 37,164, 65, 64,  0,160, 64,161, 48, 60, 61, 60, 48, 32, 30, 32, 60, 42, 42,
 42, 42, 34,212,  0,  0, 32,  0,  6,  3,132, 66, 65, 71,132, 47, 82, 44,  0,  0,
  0, 35, 32, 32,224, 32, 32,235, 20,  8,  0,  0,  0,  4,132,138, 10, 19, 16, 16,
 32, 32,  0,  0,  0, 35, 18,242,210,210,226,194, 50,  2,  2, 64,128,161, 50,191,
190,190, 49,160,131, 64,  0,};

// Index into bitmap_data for each group of glyph bitmaps
static const unsigned int group_bitmap_offsets[] PROGMEM = {  0,  9,  9, 12, 15,
135,205,744,762,874,964,975,978,1044,1135,1268,1280,1355,1420,1429,1519,1722,
2296,2593,2785,2985,3183,3228,3342,3496,3643,3724,};

// Starting glyph index for each group of glyph bitmaps
static const unsigned int group_startidx[] PROGMEM = {  0,  1,  2,  3,  4, 42,
 57,179,181,202,216,217,218,235,252,281,282,306,326,330,358,403,534,586,623,654,
682,695,724,753,786,798,};

// Number of glyphs in each group of glyph bitmaps
static const byte group_nglyphs[] PROGMEM = {  1,  1,  1,  1, 38, 15,122,  2,
 21, 14,  1,  1, 17, 17, 29,  1, 24, 20,  4, 28, 45,131, 52, 37, 31, 28, 13, 29,
 29, 33, 12,  8,};

// Starting row of glyph bitmap for each group
static const byte group_rowstart[] PROGMEM = {  1,  0,  5,  4,  2,  0,  2,  0,
  2,  0,  0,  2,  0,  2,  0,  0,  5,  0,  4,  2,  0,  2,  0,  2,  0,  0,  0,  0,
  2,  0,  0,  0,};

// Number of rows in bitmap for each group
static const byte group_nrow[] PROGMEM = {  9,  0,  3,  3,  5,  7,  7,  9,  8,
 10, 11,  3,  6,  7,  7, 12,  5,  5,  3,  5,  7,  7,  9,  8, 10, 11,  5,  6,  7,
  7,  9, 12,};

// Starting column of bitmap for each group
static const byte group_colstart[] PROGMEM = {  1,  0,  1,  2,  1,  1,  1,  1,
  1,  1,  1,  0,  0,  0,  0,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,
  0,  0,  0,  0,};

// Nuber of columns in bitmap for each group
static const byte group_ncol[] PROGMEM = {  5,  0,  5,  3,  5,  5,  5,  5,  5,
  5,  5,  4,  5,  6,  5,  3,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,
  5,  6,  6,};

/*
Character bitmap data is sent to the screen from left to right, bottom to top:
                              ...
                              VWXYZa
                              PQRSTU
                              JKLMNO
                              DEFGHI
                              789ABC
                              123456

Internally, each row is a packed in a byte. The left-most column is the 
lowest-order bit. The top two bit are not used. The bottom row is "0". So the 
above pixel layout would have the following bit-packing:

                               76543210 Bit
                          Byte |      |
                          0 -> xx654321
                          1 -> xxCBA987
                          2 -> xxIHGFED
                          3 -> xxONMLKJ
                          4 -> xxUTSRQP
                          5 -> xxaZYXWV
                          ...


It's easier to think about this by listing the lowest-order bit first:

                               01234567 Bit
                          Byte |      |
                          0 -> 123456xx
                          1 -> 789ABCxx
                          2 -> DEFGHIxx
                          3 -> JKLMNOxx
                          4 -> PQRSTUxx
                          5 -> VWXYZaxx
                          ...

For character bitmaps, empty space above/below/left/right of the character
is removed. Characters are then concatenated horizontally. Each row of pixels
in this concatenated bitmap is packed into a bit vector in a way that is 
(relatively) easy to unpack. 

bitpack_row: This function takes a row of pixels, chops it up into groups of 8,
and packs these into 8-bit integers, with the leftmost pixels occupying lower-
order bits

Each row of the image is packed like this. The order of the rows are then
reversed to convert between the normal top-to-bottom ordering of pixels and
the bottom-to-top packing that we use on the Arduino. 

Sometimes, glyph bitmap data ends up split across a byte boundary, for example: 

                                  567.012 Bit
                        Row       |     |
                        0 -> xxxxx123 456xxxxx
                        1 -> xxxxx789 ABCxxxxx
                        2 -> xxxxxDEF GHIxxxxx
                        3 -> xxxxxJKL MNOxxxxx
                        4 -> xxxxxPQR STUxxxxx
                        5 -> xxxxxVWX YZaxxxxx
                              BYTE0    BYTE1

Can we grab these by reading a whole word? Possibly? AVR is little-endian.
Higher-order bytes of a uint16 are in higher addresses. So this won't work. 
It might work if we reversed the bit-packing order, but then.. no, too 
confusing. We could possibly write a custom macro to load a big-endian uint8, 
but also too confusing. 


*/

/**
 * Load a glyph from memory. Assumes glyphs have been horizontally concatenated
 * into a single bitmap, each row packed in a bit-vector, and all rows
 * interleaved into a single array. Low-order bits correspond to the left-
 * most columns of pixel data.
 * 
 */
inline void load_rowpacked_glyph(const byte *c, 
  unsigned int index, 
  byte rowstart, byte nrows,
  byte colstart, byte ncols ) {
  
  // Start by zeroing out empty rows
  
  byte r=0;
  while (r<rowstart) { char_bitmap[r]=0; r++; }
  
  // - Get the size of the character. Rows are packed separately, so the 
  //   "stride" between consecutively packed bytes equals the number of rows. 
  // - To find the start of character data, take the number of columns (in 
  //   bits), times the index. 
  // - From this, calculate the byte to start reading at (÷8), and the offset
  //   (%8; in bits) into this byte.
  // - Then, to figure out where to start: multiply byte index by array stride.
  
  int         bit_index  = index * ncols;
  int         byte_index = bit_index >> 3;
  byte        bit_offset = bit_index & 0b111;
  const byte *read_head  = c + byte_index * nrows;
  
  // If the bit offset + character width is more than 8, row data will be
  // split across multiple bytes.
  
  byte  is_split   = (bit_offset + ncols) > 8;
  
  // Read rows from memory one at a time. Shift the bits as needed.
  // Now, each row will be read from memory. How though? Stride is the number 
  // of packed rows. And we can advance one byte at a time if we've packed this
  // right. The "bitstart" is the thing to worry about. If that bitstart + 
  // ncols is less than 8, then we only need to read one byte. Otherwise, we
  // might be split across a byte boundary.
  
  byte rowstop = rowstart + nrows;
  
  // Mask to delete out-of-bounds pixel data
  byte bitmask = (1<<ncols)-1;
  
  // current cost is 114
  while (r<rowstop) { 
  
    byte row_data = ((byte)pgm_read_byte(read_head)) >> bit_offset;
    
    // Get second byte if needed
    if (is_split) row_data |= ((byte)pgm_read_byte(read_head+nrows)) << (8-bit_offset);
    
    // Shift into place and store in the character bitmap register
    char_bitmap[r] = (row_data&bitmask) << colstart;
    
    r++;
    read_head++;
  }
  // Clear any remaining rows
  while (r<CH) { char_bitmap[r]=0; r++; }
}

/**
 * Load glyph data based on glyph index.
 */
byte load_glyph_bitmap(unsigned int i) {
  int found = binary_search_range(i,NGROUPS,group_startidx,group_nglyphs);
  if (found<0) return NOT_IMPLEMENTED;
  unsigned int offset = pgm_read_word(group_bitmap_offsets + found);
  load_rowpacked_glyph(bitmap_data+offset, i - pgm_read_word(group_startidx +found),
    pgm_read_byte(group_rowstart +found), pgm_read_byte(group_nrow +found),
    pgm_read_byte(group_colstart +found), pgm_read_byte(group_ncol +found));
  return LOADED;
}

/*
Note on timing: 

2883 ms to draw all glyphs from scratch

after I removed
binary_search_range(i,NGROUPS,group_startidx,group_nglyphs);
//Serial.println(found);
it took 253, why is that?

//Serial.println(found); must take a very long time!

After hiding the cursor, time taken is 198
Drawing the cursor must take 253 - 198 = 55 ms
Maybe you can speed this up: instead of using xor, save the pixel data
behind the cursor? 

After moving load_glyph_bitmap out of the loop, we get 149 ms
meaning bitmap loading takes 198 - 149 = 49 ms. 
not the majority of the time taken, but not zero either. 

A loop with just `drawStyledChar` takes 139, 10 ms less. So cursor 
updating takes 10ms. That seems a bit high to me? I guess this includes
loop iteration overhead and time requires to get the time. Yes, it takes
12 ms just to update the cursor. This is probably real, since a loop contianing
just DELAY1 takes just 1 millisecond. 

`prepare_cursor` alone seems to take 1ms
`advance_cursor(1);` alone takes 1ms
But combine them and you get 12 ms. 

Maybe it's the newline that's slowing things down? That doesn't quite make
sense though, nothing happens in `newline` is we don't need to scroll. 
Time goes down to 3 ms if we remove the updates to the "blink state" bit
vector, so this might be slowing things down. 
After optimizing `update_blink` it takes 8 ms. So, not great. Blink code
updates still cost 5ms. Well, update_blink is called from only one place, 
so at least inlining shaves off another 1ms here. 
Then it looks like `drawStyledChar` is taking 144-7 = 137 ms on its own. 

Can we get this down? 
Unpacking the macro leaves the same time (good, expected). 
all but 4ms seems to be used by blit_rowwise, can this be improved? 
Passing char_bitmap as a fixed global saves 1ms. 

Ok aggressive loop unrolling saves the day. For now.




*/

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Unicode block-mapping table
// The following unicode blocks are supported. Softmapped blocks are associated
// with a custom function which must be implemented separately. All other blocks
// are handled through the mapping table defined above

// basiclatin 0x00000000-0x0000007F (handled via mapping table)
// latin1supplement 0x00000080-0x000000FF (handled via mapping table)
// latinextendeda 0x00000100-0x0000017F (handled via mapping table)
// latinextendedb 0x00000180-0x0000024F (handled via mapping table)
// ipaextensions 0x00000250-0x000002AF (handled via mapping table)
// spacingmodifierletters 0x000002B0-0x000002FF (handled via mapping table)
int _combiningdiacriticalmarks(uint16_t c); // 0x00000300-0x0000036F
// greekandcoptic 0x00000370-0x000003FF (handled via mapping table)
// cyrillic 0x00000400-0x000004FF (handled via mapping table)
// cyrillicsupplement 0x00000500-0x0000052F (handled via mapping table)
// armenian 0x00000530-0x0000058F (handled via mapping table)
// devanagari 0x00000900-0x0000097F (handled via mapping table)
// georgian 0x000010A0-0x000010FF (handled via mapping table)
// latinextendedadditional 0x00001E00-0x00001EFF (handled via mapping table)
// greekextended 0x00001F00-0x00001FFF (handled via mapping table)
// generalpunctuation 0x00002000-0x0000206F (handled via mapping table)
// superscriptsandsubscripts 0x00002070-0x0000209F (handled via mapping table)
// currencysymbols 0x000020A0-0x000020CF (handled via mapping table)
// letterlikesymbols 0x00002100-0x0000214F (handled via mapping table)
// numberforms 0x00002150-0x0000218F (handled via mapping table)
// arrows 0x00002190-0x000021FF (handled via mapping table)
// mathematicaloperators 0x00002200-0x000022FF (handled via mapping table)
// miscellaneoustechnical 0x00002300-0x000023FF (handled via mapping table)
int _enclosedalphanumerics(uint16_t c); // 0x00002460-0x000024FF
int _boxdrawing(uint16_t c); // 0x00002500-0x0000257F
int _blockelements(uint16_t c); // 0x00002580-0x0000259F
int _geometricshapes(uint16_t c); // 0x000025A0-0x000025FF
// miscellaneoussymbols 0x00002600-0x000026FF (handled via mapping table)
// dingbats 0x00002700-0x000027BF (handled via mapping table)
int _braillepatterns(uint16_t c); // 0x00002800-0x000028FF
// supplementalarrowsb 0x00002900-0x0000297F (handled via mapping table)
// miscellaneoussymbolsandarrows 0x00002B00-0x00002BFF (handled via mapping table)
// latinextendedc 0x00002C60-0x00002C7F (handled via mapping table)
// hiragana 0x00003040-0x0000309F (handled via mapping table)
// katakana 0x000030A0-0x000030FF (handled via mapping table)
// katakanaphoneticextensions 0x000031F0-0x000031FF (handled via mapping table)
// lisu 0x0000A4D0-0x0000A4FF (handled via mapping table)
// cyrillicextendedb 0x0000A640-0x0000A69F (handled via mapping table)
// latinextendedd 0x0000A720-0x0000A7FF (handled via mapping table)
// latinextendede 0x0000AB30-0x0000AB6F (handled via mapping table)
// alphabeticpresentationforms 0x0000FB00-0x0000FB4F (handled via mapping table)
int _halfwidthandfullwidthforms(uint16_t c); // 0x0000FF00-0x0000FFEF
// latinextendedf 0x00010780-0x000107BF (handled via mapping table)
int _mathematicalalphanumericsymbols(uint16_t c); // 0x0001D400-0x0001D7FF
// latinextendedg 0x0001DF00-0x0001DFFF (handled via mapping table)
// miscellaneoussymbolsandpictographs1 0x0001F300-0x0001F3FF (handled via mapping table)
// miscellaneoussymbolsandpictographs2 0x0001F400-0x0001F4FF (handled via mapping table)
// miscellaneoussymbolsandpictographs3 0x0001F500-0x0001F5FF (handled via mapping table)
// supplementalarrowsc 0x0001F800-0x0001F8FF (handled via mapping table)
int _symbolsforlegacycomputing(uint16_t c); // 0x0001FB00-0x0001FBFF

// Number of blocks defined
#define NBLOCKS (50)

// Starting unicode point of each defined block, divided by 16
static const unsigned int block_starts_x16[] PROGMEM = {  0,  8, 16, 24, 37, 43,
 48, 55, 64, 80, 83,144,266,480,496,512,519,522,528,533,537,544,560,582,592,600,
602,608,624,640,656,688,710,772,778,799,2637,2660,2674,2739,4016,4080,4216,7488,
7664,7984,8000,8016,8064,8112,};

// Number of codepoints in each block, divided by 16
static const byte block_lengths_x16[] PROGMEM = {  8,  8,  8, 13,  6,  5,  7,
  9, 16,  3,  6,  8,  6, 16, 16,  7,  3,  3,  5,  4,  7, 16, 16, 10,  8,  2,  6,
 16, 12, 16,  8, 16,  2,  6,  6,  1,  3,  6, 14,  4,  5, 15,  4, 64, 16, 16, 16,
 16, 16, 16,};

// Last supported row in unicode tables
#define LASTROW (0x1FBF)

// Codes to describe how each mapped unicode block is supported:
#define MISSING (0)
#define SOFT    (1)
#define DENSE   (2)
#define SPARSE  (3)

// Packed data describing each block;
// Low 2 bits indicates block type, as above
// Remaining bits tells us where to find more information
static const byte blockcodes[] PROGMEM = { 90, 94, 98,102,  3,  7, 13,106,110,
 11,114,118,122, 15, 19, 23,126, 27,130,134, 31, 35, 39, 17,  5,  1, 33, 47,138,
  9, 51, 55, 59,142,146,150,154, 63, 67, 71,158, 21,  0, 25,  0, 75, 79, 83, 87,
 29,};

// For DENSE and SPARSE blocks, the index code provides the offset into the
// bstart_indecies, first_offsets, last_offsets, sparse_offsets, and 
// sparse_nmapped arrays. For SOFT blocks, the index is an offset into the 
// following array of function pointers:
static int(*const softmap_functions[])(uint16_t) = {_blockelements,_boxdrawing,
  _braillepatterns,_combiningdiacriticalmarks,_enclosedalphanumerics,
  _halfwidthandfullwidthforms,_mathematicalalphanumericsymbols,
  _symbolsforlegacycomputing,_geometricshapes,};


/*
To read unicode data, 
*/

////////////////////////////////////////////////////////////////////////////////
/* Load unicode glyph (with transform) from mapping table
*/
int handle_unicode_mapping_table(byte blocktype, byte i, byte c) {

  // Check that c is within the mapped range
  byte first = pgm_read_byte(first_offsets+i);
  byte last  = pgm_read_byte(last_offsets +i);
  
  //Serial.print("Code relative offset: ");
  //Serial.println(c);
  //Serial.print("First mapped offset: ");
  //Serial.println(first);
  //Serial.print("Last mapped offset: ");
  //Serial.println(last);
  
  if (c<first || c>last) return NOT_IMPLEMENTED;

  int found;
  if (blocktype==SPARSE) {
  
    // For sparse blocks, we need to get the mapped range (this part is the same
    // as with dense blocks). Then, we need to look up how many glyphs are
    // mapped and which glyphs are mapped.
    // How many glyphs are mapped? 
    byte N = pgm_read_byte(sparse_nmapped + i);
    //Serial.print("Sparse; Number of mapped glyphs: ");
    //Serial.println(N);
    
    // Where can I find the list of which glyphs are mapped? 
    unsigned int sidx_offset = pgm_read_word(sparse_offsets + i);
    //Serial.print("sidx_offset: ");
    //Serial.println(sidx_offset);
    
    // What is the search key I should use to look up this codepoint?
    unsigned int index = c;// - first;
    //Serial.print("index: ");
    //Serial.println(index);
    
    // Search for index in the sorted list at sparse_indecies + sidx_offset
    // of length N. If not found, return.
    found = binary_search(index, N, sparse_indecies + sidx_offset);
    //Serial.print("found: ");
    //Serial.println(found);
    if (found==0xff) return NOT_IMPLEMENTED;
  } else {
    found = c - first;
  }
  
  // figure out where the data for this block start
  unsigned int cindex = pgm_read_word(bstart_indecies + i);
  
  //Serial.print(" found offset : ");
  //Serial.println(found);
  
  uint16_t glyphtransform = pgm_read_word(codepoint_map + cindex + found);
  
  //Serial.print("Packed code: ");
  //Serial.println(glyphtransform);
  
  // Obtain the code 
  return handle_transform(glyphtransform);
}



////////////////////////////////////////////////////////////////////////////////
/** Dispatch unicode point to subroutines for handling various blocks and 
 *  range of codepoints.
 */
int load_unicode(uint32_t code) {

  //Serial.print("Code ");
  //Serial.println(code);

  // Divide code by 16 to get its "row" in the uncode table
  unsigned int coderow = code>>4;
  // Skip codepoints past the end of the mapped blocks
  if (coderow>=LASTROW+1) return NOT_IMPLEMENTED;
  // Binary search to find function to handle this block
  int found = binary_search_range(coderow, NBLOCKS, block_starts_x16, block_lengths_x16);
  
  //Serial.print("Block info index ");
  //Serial.println(found);
  
  if (found<0) return NOT_IMPLEMENTED;
  // We now have the index of the block required to handle this code-point
  // Look up where this block starts to convert out codepoint into an offset
  // relative to the start of this unicode block. 
  unsigned int block_start_row = pgm_read_word(&block_starts_x16[found]);
  code -= block_start_row*16;
  
  // Previously, we handled each block as its own function. This wasted space
  // return (*unicode_block[found])(code - block_start_row*16);
  // Now, we handle blocks differently based on whether they are soft-mapped
  // vs. mapped as a base-glyph + transform. 
  // Get block information
  byte blockcode = pgm_read_byte(blockcodes + found);
  byte blocktype = blockcode & 0b11;
  byte blockidx  = blockcode >> 2; 
  
  //Serial.print("Block type ");
  //Serial.println(blocktype);
  //Serial.print("Block index ");
  //Serial.println(blockidx);
  
  switch (blocktype) {
    case MISSING: return NOT_IMPLEMENTED;
    case SOFT:    return (*softmap_functions[blockidx])(code);
  }
  return handle_unicode_mapping_table(blocktype, blockidx, code);
}

////////////////////////////////////////////////////////////////////////////////
/** Parse utf-8 encoded unicode codepoint. Based on the first byte, this will
 *  attempt to read up to 3 more bytes from the serial input. If a valid 
 *  unicode sequence is found, it will attempt to interpret and draw the 
 *  corresponding character. Returns FAIL if an invalid utf-8 sequence 
 *  encountered, or if there was an error in rendering the unicode point. If it
 *  cannot render the given unicode point, the replacement character <?> should
 *  be rendered instead. 
 *  @param byte1: first byte of a putative unicode sequence (we'll wait for 
 *      more if needed)
 */
int parse_utf8(byte byte1) {
  uint32_t code = byte1;
  if (byte1>=128) {
    int nbytes = 0;
    if      ((byte1>>5)==0b110  ) {code=byte1 & 0b11111; nbytes=1;}
    else if ((byte1>>4)==0b1110 ) {code=byte1 &  0b1111; nbytes=2;}
    else if ((byte1>>3)==0b11110) {code=byte1 &   0b111; nbytes=3;}
    if (!nbytes) return FAIL; // Ignore bad utf-8
    for (int j=0; j<nbytes; j++) {
      byte b = blocking_read();
      if (!((b>>6)==0b10)) return FAIL; // Ignore bad utf-8
      code = (code<<6)|(b&0b111111);}
  }
  //pause_incoming_serial();
  prepare_cursor();
  byte return_code = load_unicode(code);
  if (return_code == LOADED) {
    // Soft-fonts draw, but mapped fonts only load the character bitmap.
    // This allows the mathematical alphanumerics soft-font to re-use the
    // unicode mapping for Greek, without drawing to screen, in order to
    // further style characters before drawing. 
    drawStyledChar();
    advance_cursor(1);   
    return SUCCESS;
  }
  else if (return_code != SUCCESS) {
    //load_and_draw_glyph(REPLACEMENT_CHARACTER);
    load_glyph_bitmap(REPLACEMENT_CHARACTER);
    drawCharFancy(CH*row,CW*col,fg,bg,NORMAL,NORMAL,HALFWIDTH);
    advance_cursor(1);
  }
  return return_code;
}


#endif // FONTMAP
