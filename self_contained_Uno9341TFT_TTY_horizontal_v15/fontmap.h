#ifndef FONTMAP_H
#define FONTMAP_H
// This file is automatically generated, do not edit it,
// see ./prepare_fonts/README.md for more information. 

#include "combining_diacritics.h"
// geometricshapes handles some glyphs as semigrahics
#include "softfonts.h"


////////////////////////////////////////////////////////////////////////////////
// Indecies for various glyphs "G_" into the bitmap code page
#define   G_AEU (  1) // 0x000000C6 latin capital letter ae
#define   G_AEL (  2) // 0x000000E6 latin small letter ae
#define   G_DIL (  3) // 0x00000131 latin small letter dotless i
#define  G_ETHL (  4) // 0x000000F0 latin small letter eth
#define  G_THOU (  5) // 0x000000DE latin capital letter thorn
#define  G_THOL (  6) // 0x000000FE latin small letter thorn
#define   G_SSU (  7) // 0x00001E9E latin capital letter sharp s
#define   G_SSL (  8) // 0x000000DF latin small letter sharp s
#define   G_OEU (  9) // 0x00000152 latin capital ligature oe
#define   G_OEL ( 10) // 0x00000153 latin small ligature oe
#define   G_LSL ( 11) // 0x0000017F latin small letter long s
#define  G_FWHL ( 12) // 0x00000192 latin small letter f with hook
#define  G_PARD ( 13) // 0x00002202 partial differential
#define  G_LUEM ( 14) // 0x000003F5 greek lunate epsilon symbol
#define  G_THEM ( 15) // 0x000003D1 greek theta symbol
#define  G_KAPM ( 16) // 0x000003F0 greek kappa symbol
#define  G_PHIL ( 17) // 0x00000278 latin small letter phi
#define  G_MICS ( 18) // 0x000000B5 micro sign
#define   G_PIL ( 19) // 0x000003C0 greek small letter pi
#define  G_ALPL ( 20) // 0x000003B1 greek small letter alpha
#define  G_BETL ( 21) // 0x000003B2 greek small letter beta
#define  G_GAML ( 22) // 0x000003B3 greek small letter gamma
#define  G_DELL ( 23) // 0x000003B4 greek small letter delta
#define   G_O2L ( 24) // 0x0000025B latin small letter open e
#define  G_OWMU ( 25) // 0x0000019F latin capital letter o with middle tilde
#define  G_DELU ( 26) // 0x00000394 greek capital letter delta
#define  G_OMEU ( 27) // 0x000003A9 greek capital letter omega
#define   G_PIU ( 28) // 0x000003A0 greek capital letter pi
#define  G_ESHU ( 29) // 0x000001A9 latin capital letter esh
#define  G_PHIU ( 30) // 0x000003A6 greek capital letter phi
#define  G_BROB ( 31) // 0x000000A6 broken bar
#define   G_NOS (127) // 0x000000AC not sign
#define  G_CENS (128) // 0x000000A2 cent sign
#define  G_POUS (129) // 0x000000A3 pound sign
#define  G_CURS (130) // 0x000000A4 currency sign
#define   G_YES (131) // 0x000000A5 yen sign
#define  G_SECS (132) // 0x000000A7 section sign
#define  G_COPS (133) // 0x000000A9 copyright sign
#define  G_REGS (134) // 0x000000AE registered sign
#define  G_LDAQ (135) // 0x000000AB left-pointing double angle quotation mark
#define  G_RDAQ (136) // 0x000000BB right-pointing double angle quotation mark
#define  G_FEOI (137) // 0x000000AA feminine ordinal indicator
#define  G_MAOI (138) // 0x000000BA masculine ordinal indicator
#define  G_PILS (139) // 0x000000B6 pilcrow sign
#define  G_SUP0 (140) // 0x00002070 superscript 0
#define  G_SUP1 (141) // 0x000000B9 superscript 1
#define  G_SUP2 (142) // 0x000000B2 superscript 2
#define  G_SUP3 (143) // 0x000000B3 superscript 3
#define  G_SUP4 (144) // 0x00002074 superscript 4
#define  G_SUP5 (145) // 0x00002075 superscript 5
#define  G_SUP6 (146) // 0x00002076 superscript 6
#define  G_SUP7 (147) // 0x00002077 superscript 7
#define  G_SUP8 (148) // 0x00002078 superscript 8
#define  G_SUP9 (149) // 0x00002079 superscript 9
#define   G_IJU (152) // 0x00000132 latin capital ligature ij
#define   G_IJL (153) // 0x00000133 latin small ligature ij
#define  G_PLUS (154) // 0x000000B1 plus-minus sign
#define  G_MULS (155) // 0x000000D7 multiplication sign
#define  G_DIVS (156) // 0x000000F7 division sign
#define  G_VF1Q (157) // 0x000000BC vulgar fraction 1 quarter
#define  G_VF1H (158) // 0x000000BD vulgar fraction 1 half
#define  G_VF3Q (159) // 0x000000BE vulgar fraction 3 quarters
#define  G_BWTU (160) // 0x00000182 latin capital letter b with topbar
#define  G_DJEU (161) // 0x00000402 cyrillic capital letter dje
#define   G_UIU (162) // 0x00000404 cyrillic capital letter ukrainian ie
#define   G_DEU (163) // 0x00000414 cyrillic capital letter de
#define  G_ZHEU (164) // 0x00000416 cyrillic capital letter zhe
#define  G_OM2U (165) // 0x00000460 cyrillic capital letter omega
#define  G_PSIU (166) // 0x000003A8 greek capital letter psi
#define   G_BEL (167) // 0x00000431 cyrillic small letter be
#define  G_LJEU (168) // 0x00000409 cyrillic capital letter lje
#define  G_NJEU (169) // 0x0000040A cyrillic capital letter nje
#define  G_TSHU (170) // 0x0000040B cyrillic capital letter tshe
#define   G_ELU (171) // 0x0000041B cyrillic capital letter el
#define  G_DZHU (172) // 0x0000040F cyrillic capital letter dzhe
#define  G_SCHU (173) // 0x0000018F latin capital letter schwa
#define    G_UU (174) // 0x00000423 cyrillic capital letter u
#define  G_EZHU (175) // 0x000001B7 latin capital letter ezh
#define  G_TSEU (176) // 0x00000426 cyrillic capital letter tse
#define  G_CHEU (177) // 0x00000427 cyrillic capital letter che
#define  G_SHAU (178) // 0x00000428 cyrillic capital letter sha
#define  G_SHCU (179) // 0x00000429 cyrillic capital letter shcha
#define   G_HSU (180) // 0x0000042A cyrillic capital letter hard sign
#define  G_YERU (181) // 0x0000042B cyrillic capital letter yeru
#define   G_S2U (182) // 0x0000042C cyrillic capital letter soft sign
#define   G_YUU (183) // 0x0000042E cyrillic capital letter yu
#define   G_XIU (184) // 0x0000039E greek capital letter xi
#define  G_UWHM (185) // 0x000003D2 greek upsilon with hook symbol
#define  G_LJEL (186) // 0x00000459 cyrillic small letter lje
#define  G_NJEL (187) // 0x0000045A cyrillic small letter nje
#define  G_TSHL (188) // 0x0000045B cyrillic small letter tshe
#define   G_ELL (189) // 0x0000043B cyrillic small letter el
#define   G_TWL (190) // 0x0000028D latin small letter turned w
#define  G_ZETL (192) // 0x000003B6 greek small letter zeta
#define  G_NWLL (193) // 0x0000019E latin small letter n with long right leg
#define  G_THEL (194) // 0x000003B8 greek small letter theta
#define  G_IOTL (195) // 0x000003B9 greek small letter iota
#define  G_KRAL (196) // 0x00000138 latin small letter kra
#define   G_DEL (197) // 0x00000434 cyrillic small letter de
#define   G_PDL (198) // 0x00000377 greek small letter pamphylian digamma
#define   G_XIL (199) // 0x000003BE greek small letter xi
#define  G_ZHEL (200) // 0x00000436 cyrillic small letter zhe
#define  G_RHOL (201) // 0x000003C1 greek small letter rho
#define   G_FSL (202) // 0x000003C2 greek small letter final sigma
#define  G_SIGL (203) // 0x000003C3 greek small letter sigma
#define  G_TAUL (204) // 0x000003C4 greek small letter tau
#define  G_PH2L (205) // 0x000003C6 greek small letter phi
#define  G_BETM (206) // 0x000003D0 greek beta symbol
#define  G_PSIL (207) // 0x000003C8 greek small letter psi
#define  G_OMEL (208) // 0x000003C9 greek small letter omega
#define  G_DJEL (209) // 0x00000452 cyrillic small letter dje
#define G_SCBLU (210) // 0x00000299 latin letter small capital b
#define  G_GHEL (211) // 0x00000433 cyrillic small letter ghe
#define   G_ENL (212) // 0x0000043D cyrillic small letter en
#define  G_DZHL (213) // 0x0000045F cyrillic small letter dzhe
#define  G_STIG (214) // 0x000003DA greek letter stigma
#define  G_STIL (215) // 0x000003DB greek small letter stigma
#define   G_TEL (216) // 0x00000442 cyrillic small letter te
#define  G_SHAL (217) // 0x00000448 cyrillic small letter sha
#define  G_SHCL (218) // 0x00000449 cyrillic small letter shcha
#define   G_HSL (219) // 0x0000044A cyrillic small letter hard sign
#define  G_YERL (220) // 0x0000044B cyrillic small letter yeru
#define   G_S2L (221) // 0x0000044C cyrillic small letter soft sign
#define   G_YUL (222) // 0x0000044E cyrillic small letter yu
#define  G_CHEL (223) // 0x00000447 cyrillic small letter che
#define  G_HETU (224) // 0x00000370 greek capital letter heta
#define  G_HETL (225) // 0x00000371 greek small letter heta
#define   G_ASU (226) // 0x00000372 greek capital letter archaic sampi
#define   G_ASL (227) // 0x00000373 greek small letter archaic sampi
#define   G_UKU (228) // 0x00000478 cyrillic capital letter uk
#define   G_UKL (229) // 0x00000479 cyrillic small letter uk
#define   G_ROU (230) // 0x0000047A cyrillic capital letter round omega
#define   G_ROL (231) // 0x0000047B cyrillic small letter round omega
#define  G_KOPP (232) // 0x000003DE greek letter koppa
#define  G_KOPL (233) // 0x000003DF greek small letter koppa
#define  G_SAMP (234) // 0x000003E0 greek letter sampi
#define  G_SAML (235) // 0x000003E1 greek small letter sampi
#define  G_FEIU (236) // 0x000003E4 coptic capital letter fei
#define  G_FEIL (237) // 0x000003E5 coptic small letter fei
#define  G_KHEU (238) // 0x000003E6 coptic capital letter khei
#define  G_KHEL (239) // 0x000003E7 coptic small letter khei
#define  G_HORU (240) // 0x000003E8 coptic capital letter hori
#define  G_HORL (241) // 0x000003E9 coptic small letter hori
#define  G_DEIU (242) // 0x000003EE coptic capital letter dei
#define  G_DEIL (243) // 0x000003EF coptic small letter dei
#define   G_IEU (244) // 0x00000464 cyrillic capital letter iotified e
#define   G_IEL (245) // 0x00000465 cyrillic small letter iotified e
#define   G_LYU (246) // 0x00000466 cyrillic capital letter little yus
#define   G_LYL (247) // 0x00000467 cyrillic small letter little yus
#define  G_ILYU (248) // 0x00000468 cyrillic capital letter iotified little yus
#define  G_ILYL (249) // 0x00000469 cyrillic small letter iotified little yus
#define   G_BYU (250) // 0x0000046A cyrillic capital letter big yus
#define   G_BYL (251) // 0x0000046B cyrillic small letter big yus
#define  G_IBYU (252) // 0x0000046C cyrillic capital letter iotified big yus
#define  G_IBYL (253) // 0x0000046D cyrillic small letter iotified big yus
#define  G_KSIU (254) // 0x0000046E cyrillic capital letter ksi
#define  G_KSIL (255) // 0x0000046F cyrillic small letter ksi
#define  G_UDAW (256) // 0x000021A8 up down arrow with base
#define  G_TTTT (257) // 0x000016CF runic letter tiwaz tir tyr t
#define  G_DOWA (258) // 0x00002193 downwards arrow
#define  G_RIGA (259) // 0x00002192 rightwards arrow
#define  G_LEFA (260) // 0x00002190 leftwards arrow
#define  G_RIG2 (261) // 0x0000221F right angle
#define  G_LERA (262) // 0x00002194 left right arrow
#define  G_INFI (263) // 0x0000221E infinity
#define  G_BLAR (264) // 0x000025AC black rectangle
#define  G_ELEO (265) // 0x00002208 element of
#define  G_ETSB (266) // 0x00001260 ethiopic syllable ba
#define  G_IDET (267) // 0x00002261 identical to
#define  G_GOET (269) // 0x00002265 greater-than or equal to
#define  G_LOET (270) // 0x00002264 less-than or equal to
#define   G_THI (271) // 0x00002320 top half integral
#define  G_BOHI (272) // 0x00002321 bottom half integral
#define  G_ALET (274) // 0x00002248 almost equal to
#define  G_BULL (276) // 0x00002022 bullet
#define  G_SQUR (278) // 0x0000221A square root
#define    G_NL (279) // 0x0000207F superscript latin small letter n
#define   G_EOP (280) // 0x0000220E end of proof
#define  G_THOS (281) // 0x00000482 cyrillic thousands sign
#define  G_BITS (288) // 0x000020BF bitcoin sign
#define  G_BLAD (292) // 0x000025C6 black diamond
#define  G_BLAC (295) // 0x000025CF black circle
#define  G_GUAS (296) // 0x00000AF0 gujarati abbreviation sign
#define  G_LOZE (297) // 0x000025CA lozenge
#define  G_BLRT (304) // 0x000025B6 black right-pointing triangle
#define    G_IL (305) // 0x00002071 superscript latin small letter i
#define  G_ICEL (306) // 0x000016E8 runic letter icelandic-yr
#define  G_DOEM (307) // 0x0000203C double exclamation mark
#define  G_PESS (308) // 0x000020A7 peseta sign
#define  G_WHIC (311) // 0x000025CB white circle
#define  G_IZHU (318) // 0x00000474 cyrillic capital letter izhitsa
#define  G_IZHL (319) // 0x00000475 cyrillic small letter izhitsa
#define  G_BLUT (342) // 0x000025B2 black up-pointing triangle
#define  G_WHIS (344) // 0x000025A1 white square
#define  G_CHIL (347) // 0x000003C7 greek small letter chi
#define   G_OTU (350) // 0x0000047E cyrillic capital letter ot
#define   G_OTL (351) // 0x0000047F cyrillic small letter ot
#define   G_DDL (352) // 0x00000238 latin small letter db digraph
#define   G_MVU (353) // 0x00001EFC latin capital letter middle-welsh v
#define   G_MVL (354) // 0x00001EFD latin small letter middle-welsh v
#define  G_GAMU (355) // 0x00000393 greek capital letter gamma
#define  G_EZHL (356) // 0x00000292 latin small letter ezh
#define   G_YAL (357) // 0x0000044F cyrillic small letter ya
#define  G_GWUU (358) // 0x00000490 cyrillic capital letter ghe with upturn
#define  G_GWUL (359) // 0x00000491 cyrillic small letter ghe with upturn
#define  G_TSEL (360) // 0x00000446 cyrillic small letter tse
#define   G_PDU (361) // 0x00000376 greek capital letter pamphylian digamma
#define  G_GA2U (362) // 0x00000194 latin capital letter gamma
#define   G_DZU (364) // 0x000001F1 latin capital letter dz
#define G_DWSLU (365) // 0x000001F2 latin capital letter d with small letter z
#define   G_DZL (366) // 0x000001F3 latin small letter dz
#define   G_LJU (367) // 0x000001C7 latin capital letter lj
#define G_LWSLU (368) // 0x000001C8 latin capital letter l with small letter j
#define   G_LJL (369) // 0x000001C9 latin small letter lj
#define   G_NJU (370) // 0x000001CA latin capital letter nj
#define G_NWSLU (371) // 0x000001CB latin capital letter n with small letter j
#define   G_NJL (372) // 0x000001CC latin small letter nj
#define  G_YOGU (373) // 0x0000021C latin capital letter yogh
#define  G_YOGL (374) // 0x0000021D latin small letter yogh
#define   G_OUU (375) // 0x00000222 latin capital letter ou
#define   G_DJL (376) // 0x00000237 latin small letter dotless j
#define   G_NET (401) // 0x00002260 not equal to
#define  G_TRMS (402) // 0x00002122 trade mark sign
#define  G_NUMS (403) // 0x00002116 numero sign
#define  G_EURS (404) // 0x000020AC euro sign
#define  G_HORE (405) // 0x00002026 horizontal ellipsis
#define   G_PMS (406) // 0x00002030 per mille sign
#define  G_DAGG (407) // 0x00002020 dagger
#define  G_DOUD (408) // 0x00002021 double dagger
#define    G_ED (409) // 0x00002014 em dash
#define  G_TUGS (410) // 0x000020AE tugrik sign
#define  G_AUSS (411) // 0x000020B3 austral sign
#define  G_NOWA (417) // 0x00002196 north west arrow
#define  G_AOCA (418) // 0x000021BA anticlockwise open circle arrow
#define  G_RAOL (419) // 0x000021C4 rightwards arrow over leftwards arrow
#define  G_LATB (420) // 0x000021B9 leftwards arrow to bar over rightwards arrow to bar
#define  G_DOZA (421) // 0x000021AF downwards zigzag arrow
#define  G_UAWT (422) // 0x000021B0 upwards arrow with tip leftwards
#define  G_RAWC (423) // 0x000021B4 rightwards arrow with corner downwards
#define  G_ATSA (424) // 0x000021B6 anticlockwise top semicircle arrow
#define  G_INTE (425) // 0x0000203D interrobang

////////////////////////////////////////////////////////////////////////////////
// Helper routines for transformations

// Flip rows in character bitmap
#define FLIP_CBM(a,b) {byte temp=char_bitmap[a]; char_bitmap[a]=char_bitmap[b]; char_bitmap[b]=temp;}

// Mirror horizontally for odd-width characters
void mirror_horizontal_5() {
  for (byte i=0; i<CH; i++) {
    // Specialized for 6-px wide fonts
    //byte b = char_bitmap[i] & 0b11111;
    // 12345 -> 1-3254
    //b = ((0b010101&b)<<1)|((0b101010&b)>>1);
    // 1-3254 -> 54321
    //b = ((0b00000011&b)<<3)|((0b00001100&b)>>1)|((0b00100000&b)>>6);
    //char_bitmap[i] = b;
    
    byte b = char_bitmap[i] & 0b111110;
    // 12345X -> 34512X
    b = ((b&(1<<1))<<4) |
        ((b&(1<<2))<<2) |
        ((b&(1<<3))<<0) |
        ((b&(1<<4))>>2) |
        ((b&(1<<5))>>4);
    char_bitmap[i] = b;
  }
}

// Mirror horizontally for even-width charactes
void mirror_horizontal_6() {
  for (byte i=0; i<CH; i++) {
    // Specialized for 6-px wide fonts
    byte b = char_bitmap[i] & 0b111111;
    // 123456 -> 456123
    b = ((0b000111&b)<<3)|((0b111000&b)>>3);
    // 456123 -> 654321
    b = ((0b100100&b)>>2)|((0b001001&b)<<2)|(0b010010&b);
    char_bitmap[i] = b;
  }
}

// Flip vertically for upper-case letters
void mirror_vertical() {
  //for (byte i=0; i<CH/2; i++) FLIP_CBM(i,CH-1-i);
  // 01 2345678 9AB 
  // A9 8765432 10X
  FLIP_CBM(0,10);
  FLIP_CBM(1,9);
  FLIP_CBM(2,8);
  FLIP_CBM(3,7);
  FLIP_CBM(4,6);
  char_bitmap[11]=0;
}

// Flip lower-case letter vertically
void mirror_vertical_miniscule() {
    // Specialized for 12x6 fonts
    // 01 23456 789AB
    // 87 65432 10xxx
    FLIP_CBM(0,8);
    FLIP_CBM(1,7);
    FLIP_CBM(2,6);
    FLIP_CBM(3,5);
    char_bitmap[9]=0;
    char_bitmap[10]=0;
    char_bitmap[11]=0;
}

////////////////////////////////////////////////////////////////////////////////
// Transformation command codes:
#define T_H5  (512) // HREFLECTMAG
#define T_H6  (1024) // HREFLECTMIN
#define T_VU  (1536) // VREFLECTMAG
#define T_VL  (2048) // VREFLECTMIN
#define T_TU  (2560) // TURNMAG
#define T_TL  (3072) // TURNMIN
#define T_MDL (3584) // MIDDLE_DOT_LOWER
#define T_MDR (4096) // MIDDLE_DOT_RIGHT
#define T_MDU (4608) // MIDDLE_DOT_UPPER
#define T_AAUL (5120) // ACUTE_ACCENT_LEFT
#define T_GA  (5632) // GRAVE_ACCENT
#define T_AA  (6144) // ACUTE_ACCENT
#define T_XA  (6656) // CIRCUMFLEX_ACCENT
#define T_XB  (7168) // CIRCUMFLEX_ACCENT_BELOW
#define T_TA  (7680) // TILDE
#define T_MA  (8192) // MACRON
#define T_OBA (8704) // OVERLINE
#define T_BA  (9216) // BREVE
#define T_OA  (9728) // DOT_ABOVE
#define T_DA  (10240) // DIAERESIS
#define T_RA  (10752) // RING_ABOVE
#define T_DAA (11264) // DOUBLE_ACUTE_ACCENT
#define T_CRA (11776) // CARON
#define T_DGA (12288) // DOUBLE_GRAVE_ACCENT
#define T_IBA (12800) // INVERTED_BREVE
#define T_CMB (13312) // COMMA_BELOW
#define T_CDL (13824) // CEDILLA
#define T_FRMT (14336) // FERMATA
#define T_HKAB (14848) // HOOK_ABOVE
#define T_OBLW (15360) // DOT_BELOW
#define T_LBLW (15872) // LINE_BELOW
#define T_TBLW (16384) // TILDE_BELOW
#define T_BBLW (16896) // BREVE_BELOW
#define T_DBLW (17408) // DIAERESIS_BELOW
#define T_RHRA (17920) // RIGHT_HALF_RING_ABOVE
#define T_GDT (18432) // GREEK_DIALYTIKA_TONOS
#define T_DVLB (18944) // DOUBLE_VERTICAL_LINE_BELOW
#define T_MBLW (19456) // MACRON_BELOW
#define T_CDAL (19968) // CEDILLA_ABOVE_LOWER
#define T_DSU (20480) // DIAGONAL_STROKE_UPPER
#define T_DSL (20992) // DIAGONAL_STROKE_LOWER
#define T_ONR (21504) // OGONEK_RIGHT
#define T_ONM (22016) // OGONEK_MIDDLE
#define T_RAV (22528) // CARON_VARIANT
#define T_HK1 (23040) // LOWER_RIGHT_TAIL
#define T_HK2 (23552) // HOOK_2
#define T_HK3 (24064) // PALATAL_HOOK
#define T_AALL (24576) // APOSTROPHE_ABOVE_LEFT_LOWER
#define T_SMLFH (25088) // STROKE_MID_LEFT_HALF
#define T_SUMLH (25600) // STROKE_UPPER_MID_RIGHT_HALF
#define T_SUF (26112) // STROKE_UPPER_FULL
#define T_SMF (26624) // STROKE_MIDDLE_FULL
#define T_SULH (27136) // STROKE_UPPER_LEFT_HALF
#define T_LDS (27648) // DIAGONAL_STROKE_LEFT
#define T_DSM (28160) // DIAGONAL_STROKE_MID
#define T_SMMH (28672) // STROKE_MID_MID_HALF
#define T_SMLH (29184) // STROKE_MID_LOWER_HALF
#define T_DS1 (29696) // RIGHT_DESCENDER
#define T_MRD (30208) // MIDRIGHT_DESCENDER
#define T_KDS (30720) // KDIAGONAL_STROKE
#define T_LDSC (31232) // LEFT_DESCENDER
#define T_LVT (31744) // LVERTTICK
#define T_LHU (32256) // LEFT_HOOK_UPPER
#define T_RHU (32768) // RIGHT_HOOK_UPPER
#define T_ITA (33280) // ITALIC
#define T_OLN (33792) // OUTLINE

////////////////////////////////////////////////////////////////////////////////
/** Many characters can be formed by transforming others.
 *  This routine accepts a "command" byte and an "index" byte. 
 *  The "index" specifies a base glyph, and the "command" specifies some way to
 *  transform this glyph.
 *  @param index: index into the character bitmap
 *  @param command: command code to transform it
 */
int handle_transform(unsigned int transform_code) {
  unsigned int base_character = transform_code &  511;
  unsigned int command        = transform_code &  65024;        
  // Load base glyph into memory
  load_glyph_bitmap(base_character);
  // Apply transformation command
  switch (command) {
      case 0: break; // No transform
   case T_H5: { // HREFLECTMAG
      mirror_horizontal_5();
   } break;
   case T_H6: { // HREFLECTMIN
      mirror_horizontal_6();
   } break;
   case T_VU: { // VREFLECTMAG
      mirror_vertical();
   } break;
   case T_VL: { // VREFLECTMIN
      mirror_vertical_miniscule();
   } break;
   case T_TU: { // TURNMAG
      mirror_horizontal_5(); mirror_vertical();
   } break;
   case T_TL: { // TURNMIN
      mirror_horizontal_5(); mirror_vertical_miniscule();
   } break;
   case T_MDL: { // MIDDLE_DOT_LOWER
      char_bitmap[CH/2-2] |= 0b001000;
   } break;
   case T_MDR: { // MIDDLE_DOT_RIGHT
      char_bitmap[CH/2-1] |= 0b100000;
   } break;
   case T_MDU: { // MIDDLE_DOT_UPPER
      char_bitmap[CH/2-1] |= 0b001000;
   } break;
   case T_AAUL: { // ACUTE_ACCENT_LEFT
      char_bitmap[CH-1] = 0b000001;char_bitmap[CH-2] = 0b000001;
   } break;
   case T_GA: { // GRAVE_ACCENT
      combine_diacritic(COMBINING_GRAVE_ACCENT);
   } break;
   case T_AA: { // ACUTE_ACCENT
      combine_diacritic(COMBINING_ACUTE_ACCENT);
   } break;
   case T_XA: { // CIRCUMFLEX_ACCENT
      combine_diacritic(COMBINING_CIRCUMFLEX_ACCENT);
   } break;
   case T_XB: { // CIRCUMFLEX_ACCENT_BELOW
      combine_diacritic(COMBINING_CIRCUMFLEX_ACCENT_BELOW);
   } break;
   case T_TA: { // TILDE
      combine_diacritic(COMBINING_TILDE);
   } break;
   case T_MA: { // MACRON
      combine_diacritic(COMBINING_MACRON);
   } break;
   case T_OBA: { // OVERLINE
      combine_diacritic(COMBINING_OVERLINE);
   } break;
   case T_BA: { // BREVE
      combine_diacritic(COMBINING_BREVE);
   } break;
   case T_OA: { // DOT_ABOVE
      combine_diacritic(COMBINING_DOT_ABOVE);
   } break;
   case T_DA: { // DIAERESIS
      combine_diacritic(COMBINING_DIAERESIS);
   } break;
   case T_RA: { // RING_ABOVE
      combine_diacritic(COMBINING_RING_ABOVE);
   } break;
   case T_DAA: { // DOUBLE_ACUTE_ACCENT
      combine_diacritic(COMBINING_DOUBLE_ACUTE_ACCENT);
   } break;
   case T_CRA: { // CARON
      combine_diacritic(COMBINING_CARON);
   } break;
   case T_DGA: { // DOUBLE_GRAVE_ACCENT
      combine_diacritic(COMBINING_DOUBLE_GRAVE_ACCENT);
   } break;
   case T_IBA: { // INVERTED_BREVE
      combine_diacritic(COMBINING_INVERTED_BREVE);
   } break;
   case T_CMB: { // COMMA_BELOW
      combine_diacritic(COMBINING_COMMA_BELOW);
   } break;
   case T_CDL: { // CEDILLA
      combine_diacritic(COMBINING_CEDILLA);
   } break;
   case T_FRMT: { // FERMATA
      combine_diacritic(COMBINING_FERMATA);
   } break;
   case T_HKAB: { // HOOK_ABOVE
      combine_diacritic(COMBINING_HOOK_ABOVE);
   } break;
   case T_OBLW: { // DOT_BELOW
      combine_diacritic(COMBINING_DOT_BELOW);
   } break;
   case T_LBLW: { // LINE_BELOW
      combine_diacritic(COMBINING_LOW_LINE);
   } break;
   case T_TBLW: { // TILDE_BELOW
      combine_diacritic(COMBINING_TILDE_BELOW);
   } break;
   case T_BBLW: { // BREVE_BELOW
      combine_diacritic(COMBINING_BREVE_BELOW);
   } break;
   case T_DBLW: { // DIAERESIS_BELOW
      combine_diacritic(COMBINING_DIAERESIS_BELOW);
   } break;
   case T_RHRA: { // RIGHT_HALF_RING_ABOVE
      combine_diacritic(COMBINING_RIGHT_HALF_RING_ABOVE);
   } break;
   case T_GDT: { // GREEK_DIALYTIKA_TONOS
      combine_diacritic(COMBINING_GREEK_DIALYTIKA_TONOS);
   } break;
   case T_DVLB: { // DOUBLE_VERTICAL_LINE_BELOW
      combine_diacritic(COMBINING_DOUBLE_VERTICAL_LINE_BELOW);
   } break;
   case T_MBLW: { // MACRON_BELOW
      combine_diacritic(COMBINING_MACRON_BELOW);
   } break;
   case T_CDAL: { // CEDILLA_ABOVE_LOWER
      char_bitmap[MIDLINE+4] |= 0b011000;char_bitmap[MIDLINE+3] |= 0b001000;
   } break;
   case T_DSU: { // DIAGONAL_STROKE_UPPER
      char_bitmap[BASELINE+6] |= 0b100000;
      char_bitmap[BASELINE+5] |= 0b010000;
      char_bitmap[BASELINE+4] |= 0b010000;
      char_bitmap[BASELINE+3] |= 0b001000;
      char_bitmap[BASELINE+2] |= 0b000100;
      char_bitmap[BASELINE+1] |= 0b000100;
      char_bitmap[BASELINE+0] |= 0b000010;
   } break;
   case T_DSL: { // DIAGONAL_STROKE_LOWER
      char_bitmap[BASELINE+4] |= 0b100000;
      char_bitmap[BASELINE+3] |= 0b010000;
      char_bitmap[BASELINE+2] |= 0b001000;
      char_bitmap[BASELINE+1] |= 0b000100;
      char_bitmap[BASELINE+0] |= 0b000010;
   } break;
   case T_ONR: { // OGONEK_RIGHT
      char_bitmap[BASELINE-1] |= 0b010000;char_bitmap[BASELINE-2] |= 0b110000;
   } break;
   case T_ONM: { // OGONEK_MIDDLE
      char_bitmap[BASELINE-1] |= 0b001000;char_bitmap[BASELINE-2] |= 0b011000;
   } break;
   case T_RAV: { // CARON_VARIANT
      if ((char_bitmap[9]&0b100000)||(char_bitmap[8]&0b100000)) {
        for (byte i=0; i<CH; i++) {
          char_bitmap[i] = (char_bitmap[i]|((char_bitmap[i]&0b100000)>>1))&0b011111;
        }
      }
      char_bitmap[9] |= 0b100000;
      char_bitmap[8]  |= 0b100000;
   } break;
   case T_HK1: { // LOWER_RIGHT_TAIL
      char_bitmap[BASELINE-1] |= 0b100000;char_bitmap[BASELINE-2] |= 0b010000;
   } break;
   case T_HK2: { // HOOK_2
      char_bitmap[BASELINE-1] |= 0b100000;char_bitmap[BASELINE-2] |= 0b110000;
   } break;
   case T_HK3: { // PALATAL_HOOK
      char_bitmap[BASELINE-1] |= 0b100000;char_bitmap[BASELINE-2] |= 0b011000;
   } break;
   case T_AALL: { // APOSTROPHE_ABOVE_LEFT_LOWER
      char_bitmap[MIDLINE+4] |= 0b000001;char_bitmap[MIDLINE+3] |= 0b000001;
   } break;
   case T_SMLFH: { // STROKE_MID_LEFT_HALF
      char_bitmap[5] |= 0b000111;
   } break;
   case T_SUMLH: { // STROKE_UPPER_MID_RIGHT_HALF
      char_bitmap[8] |= 0b111000;
   } break;
   case T_SUF: { // STROKE_UPPER_FULL
      char_bitmap[7] |= 0b111111;
   } break;
   case T_SMF: { // STROKE_MIDDLE_FULL
      char_bitmap[6] |= 0b011111;
   } break;
   case T_SULH: { // STROKE_UPPER_LEFT_HALF
      char_bitmap[8] |= 0b000111;
   } break;
   case T_LDS: { // DIAGONAL_STROKE_LEFT
      char_bitmap[4] |= 0b000110;char_bitmap[5] |= 0b000011;
   } break;
   case T_DSM: { // DIAGONAL_STROKE_MID
      char_bitmap[5] |= 0b011000;char_bitmap[6] |= 0b001100;
   } break;
   case T_SMMH: { // STROKE_MID_MID_HALF
      char_bitmap[5] |= 0b011100;
   } break;
   case T_SMLH: { // STROKE_MID_LOWER_HALF
      char_bitmap[4] |= 0b011110;
   } break;
   case T_DS1: { // RIGHT_DESCENDER
      char_bitmap[1] |= 0b100000;char_bitmap[0] |= 0b100000;
   } break;
   case T_MRD: { // MIDRIGHT_DESCENDER
      char_bitmap[1] |= 0b010000;char_bitmap[0] |= 0b010000;
   } break;
   case T_KDS: { // KDIAGONAL_STROKE
      char_bitmap[4] |= 0b100000;
      char_bitmap[3] |= 0b010000;
      char_bitmap[2] |= 0b001000;
   } break;
   case T_LDSC: { // LEFT_DESCENDER
      char_bitmap[1] |= 0b000010;
      char_bitmap[0] |= 0b000010;
   } break;
   case T_LVT: { // LVERTTICK
      char_bitmap[7] |= 0b000001;
   } break;
   case T_LHU: { // LEFT_HOOK_UPPER
      for (byte i=0; i<CH; i++) char_bitmap[i] = (0b111100&char_bitmap[i]) | ((char_bitmap[i]&0b000011)<<1);
      char_bitmap[8] |= 0b000011;
      char_bitmap[7] |= 0b000001;
   } break;
   case T_RHU: { // RIGHT_HOOK_UPPER
      for (byte i=0; i<CH; i++) char_bitmap[i] = (0b001111&char_bitmap[i]) | ((char_bitmap[i]&0b110000)>>1);
      char_bitmap[8] |= 0b110000;
      char_bitmap[7] |= 0b100000;
   } break;
   case T_ITA: { // ITALIC
      italicize();
   } break;
   case T_OLN: { // OUTLINE
      outline();
   } break;
    default:
      return NOT_IMPLEMENTED;
  }
  return LOADED;
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00000080-0x000000FF "Latin-1 Supplement "
// Offsets 32 through 127 are mapped in this block
static const unsigned int latin1supplement_map[] PROGMEM = {
  ' '|0,        '!'|T_VU,     G_CENS|0,     G_POUS|0,     G_CURS|0,     G_YES|0,      G_BROB|0,     G_SECS|0,     
  ' '|T_DA,     G_COPS|0,     G_FEOI|0,     G_LDAQ|0,     G_NOS|0,      ' '|0,        G_REGS|0,     ' '|T_MA,     
  ' '|T_RA,     G_PLUS|0,     G_SUP2|0,     G_SUP3|0,     ' '|T_AA,     G_MICS|0,     G_PILS|0,     ' '|T_MDU,    
  ' '|T_CDL,    G_SUP1|0,     G_MAOI|0,     G_RDAQ|0,     G_VF1Q|0,     G_VF1H|0,     G_VF3Q|0,     '?'|T_VU,     
  'A'|T_GA,     'A'|T_AA,     'A'|T_XA,     'A'|T_TA,     'A'|T_DA,     'A'|T_RA,     G_AEU|0,      'C'|T_CDL,    
  'E'|T_GA,     'E'|T_AA,     'E'|T_XA,     'E'|T_DA,     'I'|T_GA,     'I'|T_AA,     'I'|T_XA,     'I'|T_DA,     
  'D'|T_SMLFH,  'N'|T_TA,     'O'|T_GA,     'O'|T_AA,     'O'|T_XA,     'O'|T_TA,     'O'|T_DA,     G_MULS|0,     
  'O'|T_DSU,    'U'|T_GA,     'U'|T_AA,     'U'|T_XA,     'U'|T_DA,     'Y'|T_AA,     G_THOU|0,     G_SSL|0,      
  'a'|T_GA,     'a'|T_AA,     'a'|T_XA,     'a'|T_TA,     'a'|T_DA,     'a'|T_RA,     G_AEL|0,      'c'|T_CDL,    
  'e'|T_GA,     'e'|T_AA,     'e'|T_XA,     'e'|T_DA,     'i'|T_GA,     'i'|T_AA,     'i'|T_XA,     'i'|T_DA,     
  G_ETHL|0,     'n'|T_TA,     'o'|T_GA,     'o'|T_AA,     'o'|T_XA,     'o'|T_TA,     'o'|T_DA,     G_DIVS|0,     
  'o'|T_DSL,    'u'|T_GA,     'u'|T_AA,     'u'|T_XA,     'u'|T_DA,     'y'|T_AA,     G_THOL|0,     'y'|T_DA,     
  };
//______________________________________________________________________________
// 0x00000080-0x000000FF: Latin-1 Supplement 
int _latin1supplement(unsigned int c) {
  if (c<32 || c>127) return NOT_IMPLEMENTED;
  unsigned int index = (c-32);
  unsigned int code  = pgm_read_word(latin1supplement_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00000100-0x0000017F "Latin Extended-A "
// Offsets 0 through 127 are mapped in this block
static const unsigned int latinextendeda_map[] PROGMEM = {
  'A'|T_MA,     'a'|T_MA,     'A'|T_BA,     'a'|T_BA,     'A'|T_ONR,    'a'|T_ONR,    'C'|T_AA,     'c'|T_AA,     
  'C'|T_XA,     'c'|T_XA,     'C'|T_OA,     'c'|T_OA,     'C'|T_CRA,    'c'|T_CRA,    'D'|T_CRA,    'd'|T_RAV,    
  'D'|T_SMLFH,  'd'|T_SUMLH,  'E'|T_MA,     'e'|T_MA,     'E'|T_BA,     'e'|T_BA,     'E'|T_OA,     'e'|T_OA,     
  'E'|T_ONR,    'e'|T_ONR,    'E'|T_CRA,    'e'|T_CRA,    'G'|T_XA,     'g'|T_XA,     'G'|T_BA,     'g'|T_BA,     
  'G'|T_OA,     'g'|T_OA,     'G'|T_CDL,    'g'|T_CDAL,   'H'|T_XA,     'h'|T_XA,     'H'|T_SUF,    'h'|T_SULH,   
  'I'|T_TA,     'i'|T_TA,     'I'|T_MA,     'i'|T_MA,     'I'|T_BA,     'i'|T_BA,     'I'|T_ONM,    'i'|T_ONR,    
  'I'|T_OA,     G_DIL|0,      G_IJU|0,      G_IJL|0,      'J'|T_XA,     'j'|T_XA,     'K'|T_CDL,    'k'|T_CDL,    
  G_KRAL|0,     'L'|T_AA,     'l'|T_AA,     'L'|T_CDL,    'l'|T_CDL,    'L'|T_RAV,    'l'|T_RAV,    'L'|T_MDU,    
  'l'|T_MDR,    'L'|T_LDS,    'l'|T_DSM,    'N'|T_AA,     'n'|T_AA,     'N'|T_CDL,    'n'|T_CDL,    'N'|T_CRA,    
  'n'|T_CRA,    'n'|T_AALL,   'N'|T_HK1,    'n'|T_HK1,    'O'|T_MA,     'o'|T_MA,     'O'|T_BA,     'o'|T_BA,     
  'O'|T_DAA,    'o'|T_DAA,    G_OEU|0,      G_OEL|0,      'R'|T_AA,     'r'|T_AA,     'R'|T_CDL,    'r'|T_CDL,    
  'R'|T_CRA,    'r'|T_CRA,    'S'|T_AA,     's'|T_AA,     'S'|T_XA,     's'|T_XA,     'S'|T_CDL,    's'|T_CDL,    
  'S'|T_CRA,    's'|T_CRA,    'T'|T_CDL,    't'|T_CDL,    'T'|T_CRA,    't'|T_RAV,    'T'|T_SMMH,   't'|T_SMLH,   
  'U'|T_TA,     'u'|T_TA,     'U'|T_MA,     'u'|T_MA,     'U'|T_BA,     'u'|T_BA,     'U'|T_RA,     'u'|T_RA,     
  'U'|T_DAA,    'u'|T_DAA,    'U'|T_ONM,    'u'|T_ONR,    'W'|T_XA,     'w'|T_XA,     'Y'|T_XA,     'y'|T_XA,     
  'Y'|T_DA,     'Z'|T_AA,     'z'|T_AA,     'Z'|T_OA,     'z'|T_OA,     'Z'|T_CRA,    'z'|T_CRA,    G_LSL|0,      
  };
//______________________________________________________________________________
// 0x00000100-0x0000017F: Latin Extended-A 
int _latinextendeda(unsigned int c) {
  if (c<0 || c>127) return NOT_IMPLEMENTED;
  unsigned int index = (c-0);
  unsigned int code  = pgm_read_word(latinextendeda_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00000180-0x0000024F "Latin Extended-B "
// !!!! WARNING ǵ defined as transform T_AA of ǵ,  but ǵ is not available as a base glyph
// Offsets 0 through 207 are mapped in this block
static const unsigned int latinextendedb_map[] PROGMEM = {
  'b'|T_SULH,   'B'|T_LHU,    G_BWTU|0,     0|0,          G_S2U|T_LVT,  'b'|T_LVT,    'C'|T_H5,     'C'|T_RHU,    
  0|0,          'D'|T_SMLFH,  'D'|T_LHU,    G_BWTU|T_H5,  0|0,          G_DELL|T_VL,  'E'|T_H5,     G_SCHU|0,     
  '3'|T_H5,     0|0,          G_FWHL|0,     'G'|T_RHU,    G_GA2U|0,     0|0,          'I'|0,        'I'|T_SMMH,   
  'K'|T_RHU,    0|0,          'l'|T_SMMH,   0|0,          0|0,          0|0,          G_NWLL|0,     G_OWMU|0,     
  0|0,          0|0,          0|0,          0|0,          'P'|T_LHU,    0|0,          'R'|0,        'S'|T_H5,     
  's'|T_H5,     G_ESHU|0,     0|0,          't'|T_HK3,    0|0,          0|0,          0|0,          0|0,          
  0|0,          G_OMEU|T_VU,  0|0,          0|0,          0|0,          'Z'|T_SMMH,   'z'|T_SMLH,   G_EZHU|0,     
  G_EZHU|T_H5,  G_EZHL|T_H6,  0|0,          '2'|T_SMMH,   '5'|T_LVT,    0|0,          0|0,          G_THOL|0,     
  0|0,          0|0,          0|0,          '!'|0,        G_DZU|T_CRA,  G_DWSLU|T_CRA,G_DZL|T_CRA,  G_LJU|0,      
  G_LWSLU|0,    G_LJL|0,      G_NJU|0,      G_NWSLU|0,    G_NJL|0,      'A'|T_CRA,    'a'|T_CRA,    'I'|T_CRA,    
  'i'|T_CRA,    'O'|T_CRA,    'o'|T_CRA,    'U'|T_CRA,    'u'|T_CRA,    0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          'e'|T_TL,     0|0,          0|0,          
  0|0,          0|0,          G_AEU|T_MA,   G_AEL|T_MA,   0|0,          0|0,          'G'|T_CRA,    'g'|T_CRA,    
  'K'|T_CRA,    'k'|T_CRA,    'O'|T_ONM,    'o'|T_ONM,    0|0,          0|0,          G_EZHU|T_AA,  G_EZHL|T_AA,  
  'j'|T_CRA,    G_DZU|0,      G_DWSLU|0,    G_DZL|0,      'G'|T_AA,     0|0,          0|0,          0|0,          
  'N'|T_GA,     'n'|T_GA,     0|0,          0|0,          G_AEU|T_AA,   G_AEL|T_AA,   0|0,          0|0,          
  'A'|T_DGA,    'a'|T_DGA,    'A'|T_IBA,    'a'|T_IBA,    'E'|T_DGA,    'e'|T_DGA,    'E'|T_IBA,    'e'|T_IBA,    
  'I'|T_DGA,    'i'|T_DGA,    'I'|T_IBA,    'i'|T_IBA,    'O'|T_DGA,    'o'|T_DGA,    'O'|T_IBA,    'o'|T_IBA,    
  'R'|T_DGA,    'r'|T_DGA,    'R'|T_IBA,    'r'|T_IBA,    'U'|T_DGA,    'u'|T_DGA,    'U'|T_IBA,    'u'|T_IBA,    
  'S'|T_CMB,    's'|T_CMB,    'T'|T_CMB,    't'|T_CMB,    G_YOGU|0,     G_YOGL|0,     'H'|T_CRA,    'h'|T_CRA,    
  'n'|T_DS1,    0|0,          G_OUU|0,      G_OUU|0,      'Z'|T_HK3,    'z'|T_HK3,    'A'|T_OA,     'a'|T_OA,     
  'E'|T_CDL,    'e'|T_CDL,    0|0,          0|0,          0|0,          0|0,          'O'|T_OA,     'o'|T_OA,     
  0|0,          0|0,          'Y'|T_MA,     'y'|T_MA,     0|0,          0|0,          0|0,          G_DJL|0,      
  G_DDL|0,      G_DDL|T_VL,   'A'|T_DSU,    'C'|T_DSU,    'c'|T_DSL,    'L'|T_SULH,   'T'|T_DSU,    0|0,          
  0|0,          '?'|0,        0|0,          0|0,          'U'|T_SUF,    'V'|T_VU,     'E'|T_DSU,    'e'|T_DSL,    
  'J'|T_SMMH,   'j'|T_SMLH,   0|0,          0|0,          'R'|T_SMMH,   'R'|T_SMLH,   'Y'|T_SUF,    'y'|T_SMF,    
  };
//______________________________________________________________________________
// 0x00000180-0x0000024F: Latin Extended-B 
int _latinextendedb(unsigned int c) {
  if (c<0 || c>207) return NOT_IMPLEMENTED;
  unsigned int index = (c-0);
  unsigned int code  = pgm_read_word(latinextendedb_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x000002B0-0x000002FF "Spacing Modifier Letters "
// Offsets 9 through 72 are mapped in this block
static const unsigned int spacingmodifierletters_map[] PROGMEM = {
  ' '|T_AA,     0|0,          ' '|T_AA,     ' '|T_AA,     '\''|0,       0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          ' '|T_XA,     ' '|T_CRA,    '\''|0,       
  ' '|T_MA,     ' '|T_AA,     '`'|0,        0|0,          0|0,          0|0,          0|0,          ':'|0,        
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          '-'|0,        ' '|T_BA,     
  ' '|T_OA,     ' '|T_RA,     ' '|T_ONM,    ' '|T_TA,     ' '|T_DAA,    0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          '`'|0,        0|0,          0|0,          0|0,          ':'|0,        
  };
//______________________________________________________________________________
// 0x000002B0-0x000002FF: Spacing Modifier Letters 
int _spacingmodifierletters(unsigned int c) {
  if (c<9 || c>72) return NOT_IMPLEMENTED;
  unsigned int index = (c-9);
  unsigned int code  = pgm_read_word(spacingmodifierletters_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00000370-0x000003FF "Greek and Coptic "
// !!!! WARNING ͽ defined as transform T_MDL of ɔ,  but ɔ is not available as a base glyph
// !!!! WARNING Ͽ defined as transform T_MDU of Ɔ,  but Ɔ is not available as a base glyph
// Offsets 0 through 142 are mapped in this block
static const unsigned int greekandcoptic_map[] PROGMEM = {
  G_HETU|0,     G_HETL|0,     G_ASU|0,      G_ASL|0,      ' '|T_AA,     ' '|T_CDL,    G_PDU|0,      G_PDL|0,      
  0|0,          0|0,          ' '|T_CDL,    'c'|T_H6,     'c'|T_MDL,    0|0,          ';'|0,        'J'|0,        
  0|0,          0|0,          0|0,          0|0,          ' '|T_AA,     ' '|T_GDT,    'A'|T_AAUL,   ' '|T_MDU,    
  'E'|T_AAUL,   'H'|T_AAUL,   'I'|T_AAUL,   0|0,          'O'|T_AAUL,   0|0,          'Y'|T_AAUL,   G_OMEU|T_AAUL,
  G_IOTL|T_GDT, 'A'|0,        'B'|0,        G_GAMU|0,     G_DELU|0,     'E'|0,        'Z'|0,        'H'|0,        
  G_OWMU|0,     'I'|0,        'K'|0,        'V'|T_VU,     'M'|0,        'N'|0,        G_XIU|0,      'O'|0,        
  G_PIU|0,      'P'|0,        0|0,          G_ESHU|0,     'T'|0,        'Y'|0,        G_PHIU|0,     'X'|0,        
  G_PSIU|0,     G_OMEU|0,     'I'|T_DA,     'Y'|T_DA,     G_ALPL|T_AA,  G_O2L|T_AA,   G_NWLL|T_AA,  G_IOTL|T_AA,  
  'u'|T_GDT,    G_ALPL|0,     G_BETL|0,     G_GAML|0,     G_DELL|0,     G_O2L|0,      G_ZETL|0,     G_NWLL|0,     
  G_THEL|0,     G_IOTL|0,     G_KRAL|0,     'y'|T_VL,     G_MICS|0,     'v'|0,        G_XIL|0,      'o'|0,        
  G_PIL|0,      G_RHOL|0,     G_FSL|0,      G_SIGL|0,     G_TAUL|0,     'u'|0,        G_PH2L|0,     G_CHIL|0,     
  G_PSIL|0,     G_OMEL|0,     G_IOTL|T_DA,  'u'|T_DA,     'o'|T_AA,     'u'|T_AA,     G_OMEL|T_AA,  'K'|T_HK1,    
  G_BETM|0,     G_THEM|0,     G_UWHM|0,     G_UWHM|T_AAUL,G_UWHM|T_DA,  G_PHIL|0,     G_OMEL|T_SMF, G_KAPM|T_HK2, 
  'Q'|0,        'q'|0,        G_STIG|0,     G_STIL|0,     'F'|0,        G_FWHL|0,     G_KOPP|0,     G_KOPL|0,     
  G_SAMP|0,     G_SAML|0,     0|0,          0|0,          G_FEIU|0,     G_FEIL|0,     G_KHEU|0,     G_KHEL|0,     
  G_HORU|0,     G_HORL|0,     0|0,          0|0,          G_MVU|T_H5,   G_MVL|T_H5,   G_DEIU|0,     G_DEIL|0,     
  G_KAPM|0,     G_PARD|T_TL,  'c'|0,        'j'|0,        G_OWMU|0,     G_LUEM|0,     G_LUEM|T_H6,  G_THOU|0,     
  G_THOL|0,     'C'|0,        'M'|0,        G_TWL|T_LDSC, 0|0,          'C'|T_H5,     'C'|T_MDU,    };
//______________________________________________________________________________
// 0x00000370-0x000003FF: Greek and Coptic 
int _greekandcoptic(unsigned int c) {
  if (c<0 || c>142) return NOT_IMPLEMENTED;
  unsigned int index = (c-0);
  unsigned int code  = pgm_read_word(greekandcoptic_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00000400-0x000004FF "Cyrillic "
// !!!! WARNING ҙ defined as transform T_CDL of ɜ,  but ɜ is not available as a base glyph
// !!!! WARNING ӛ defined as transform T_DA of ǝ,  but ǝ is not available as a base glyph
// !!!! WARNING ӟ defined as transform T_DA of ɜ,  but ɜ is not available as a base glyph
// !!!! WARNING ӫ defined as transform T_DA of ɵ,  but ɵ is not available as a base glyph
// !!!! WARNING Ӭ defined as transform T_DA of Э,  but Э is not available as a base glyph
// !!!! WARNING ӭ defined as transform T_DA of ϶,  but ϶ is not available as a base glyph
// Offsets 0 through 253 are mapped in this block
static const unsigned int cyrillic_map[] PROGMEM = {
  'E'|T_GA,     'E'|T_DA,     G_DJEU|0,     G_GAMU|T_AA,  G_UIU|0,      'S'|0,        'I'|0,        'I'|T_DA,     
  'J'|0,        G_LJEU|0,     G_NJEU|0,     G_TSHU|0,     'K'|T_AA,     G_PDU|T_GA,   G_UU|T_BA,    G_DZHU|0,     
  'A'|0,        G_BWTU|0,     'B'|0,        G_GAMU|0,     G_DEU|0,      'E'|0,        G_ZHEU|0,     '3'|0,        
  G_PDU|0,      G_PDU|T_BA,   'K'|0,        G_ELU|0,      'M'|0,        'H'|0,        'O'|0,        G_PIU|0,      
  'P'|0,        'C'|0,        'T'|0,        G_UU|0,       G_PHIU|0,     'X'|0,        G_TSEU|0,     G_CHEU|0,     
  G_SHAU|0,     G_SHCU|0,     G_HSU|0,      G_YERU|0,     G_S2U|0,      G_UIU|T_H5,   G_YUU|0,      'R'|T_H5,     
  'a'|0,        G_BEL|0,      G_SCBLU|0,    G_GHEL|0,     G_DEL|0,      'e'|0,        G_ZHEL|0,     G_O2L|T_H6,   
  G_PDL|0,      G_PDL|T_BA,   G_KRAL|0,     G_ELL|0,      G_TWL|0,      G_ENL|0,      'o'|0,        G_PIL|0,      
  'p'|0,        'c'|0,        G_TEL|0,      'y'|0,        G_PHIL|0,     'x'|0,        G_TSEL|0,     G_CHEL|0,     
  G_SHAL|0,     G_SHCL|0,     G_HSL|0,      G_YERL|0,     G_S2L|0,      G_LUEM|T_H6,  G_YUL|0,      G_YAL|0,      
  'e'|T_GA,     'e'|T_DA,     G_DJEL|0,     G_GHEL|T_AA,  G_LUEM|0,     's'|0,        'i'|0,        'i'|T_DA,     
  'j'|0,        G_LJEL|0,     G_NJEL|0,     G_TSHL|0,     G_KRAL|T_AA,  G_PDL|T_GA,   'y'|T_BA,     G_DZHL|0,     
  G_OM2U|0,     G_OMEL|0,     'b'|T_SULH,   G_S2U|T_SULH, G_IEU|0,      G_IEL|0,      G_LYU|0,      G_LYL|0,      
  G_ILYU|0,     G_ILYL|0,     G_BYU|0,      G_BYL|0,      G_IBYU|0,     G_IBYL|0,     G_KSIU|0,     G_KSIL|0,     
  G_PSIU|0,     G_PSIL|0,     G_OWMU|0,     'o'|T_SMLH,   G_IZHU|0,     G_IZHL|0,     0|0,          0|0,          
  G_UKU|0,      G_UKL|0,      G_ROU|0,      G_ROL|0,      G_OM2U|T_FRMT,G_OMEL|T_FRMT,G_OTU|0,      G_OTL|0,      
  0|0,          'c'|T_HK2,    G_THOS|0,     0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          'b'|T_SULH,   G_S2U|T_SULH, 0|0,          0|0,          
  G_GWUU|0,     G_GWUL|0,     G_GAMU|T_SULH,0|0,          0|0,          0|0,          G_ZHEU|T_DS1, G_ZHEL|T_DS1, 
  '3'|T_CDL,    0|0,          'K'|T_DS1,    G_KRAL|T_DS1, 0|0,          0|0,          'K'|T_SULH,   'k'|T_SULH,   
  0|0,          0|0,          'H'|T_DS1,    G_ENL|T_DS1,  0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          'C'|T_CDL,    'c'|T_CDL,    'T'|T_MRD,    G_TEL|T_MRD,  'Y'|0,        0|0,          
  'Y'|T_SMMH,   0|0,          'X'|T_DS1,    'x'|T_DS1,    0|0,          0|0,          G_CHEU|T_DS1, G_CHEL|T_DS1, 
  0|0,          0|0,          'h'|0,        'h'|0,        0|0,          'e'|0,        0|0,          0|0,          
  'I'|0,        G_ZHEU|T_BA,  G_ZHEL|T_BA,  'K'|T_HK2,    G_KRAL|T_HK2, G_ELU|T_HK1,  G_ELL|T_HK1,  'H'|T_HK2,    
  G_ENL|T_HK2,  'H'|T_HK1,    G_ENL|T_HK1,  G_CHEU|T_MRD, G_CHEL|T_MRD, 'M'|T_HK1,    G_TWL|T_HK1,  'i'|0,        
  'A'|T_BA,     'a'|T_BA,     'A'|T_DA,     'a'|T_DA,     G_AEU|0,      G_AEL|0,      'E'|T_BA,     'e'|T_BA,     
  G_SCHU|0,     'e'|T_TL,     G_SCHU|T_DA,  0|0,          G_ZHEU|T_DA,  G_ZHEL|T_DA,  '3'|T_DA,     0|0,          
  G_EZHU|0,     G_EZHL|T_MBLW,G_PDU|T_MA,   G_PDL|T_MA,   G_PDU|T_DA,   G_PDL|T_DA,   'O'|T_DA,     'o'|T_DA,     
  G_OWMU|0,     'o'|T_SMLH,   G_OWMU|T_DA,  0|0,          0|0,          0|0,          G_UU|T_MA,    'y'|T_MA,     
  G_UU|T_DA,    'y'|T_DA,     G_UU|T_DAA,   'y'|T_DAA,    G_CHEU|T_DA,  G_CHEL|T_DA,  G_GAMU|T_MRD, G_GHEL|T_MRD, 
  G_YERU|T_DA,  G_YERL|T_DA,  0|0,          0|0,          'X'|T_HK2,    'x'|T_HK2,    };
//______________________________________________________________________________
// 0x00000400-0x000004FF: Cyrillic 
int _cyrillic(unsigned int c) {
  if (c<0 || c>253) return NOT_IMPLEMENTED;
  unsigned int index = (c-0);
  unsigned int code  = pgm_read_word(cyrillic_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00001E00-0x00001EFF "Latin Extended Additional "
// Offsets 2 through 255 are mapped in this block
static const unsigned int latinextendedadditional_map[] PROGMEM = {
  'B'|T_OA,     'b'|T_OA,     'B'|T_OBLW,   'b'|T_OBLW,   'B'|T_LBLW,   'b'|T_LBLW,   0|0,          0|0,          
  'D'|T_OA,     'd'|T_OA,     'D'|T_OBLW,   'd'|T_OBLW,   'D'|T_LBLW,   'd'|T_LBLW,   'D'|T_CDL,    'd'|T_CDL,    
  'D'|T_XB,     'd'|T_XB,     0|0,          0|0,          0|0,          0|0,          'E'|T_XB,     'e'|T_XB,     
  'E'|T_TBLW,   'e'|T_TBLW,   0|0,          0|0,          'F'|T_OA,     'f'|T_OA,     'G'|T_MA,     'g'|T_MA,     
  'H'|T_OA,     'h'|T_OA,     'H'|T_OBLW,   'h'|T_OBLW,   'H'|T_DA,     'h'|T_DA,     'H'|T_CDL,    'h'|T_CDL,    
  'H'|T_BBLW,   'h'|T_BBLW,   'I'|T_TBLW,   'i'|T_TBLW,   0|0,          0|0,          'K'|T_AA,     'k'|T_AA,     
  'K'|T_OBLW,   'k'|T_OBLW,   'K'|T_LBLW,   'k'|T_LBLW,   'L'|T_OBLW,   'l'|T_OBLW,   0|0,          0|0,          
  'L'|T_LBLW,   'l'|T_LBLW,   'L'|T_XB,     'l'|T_XB,     'M'|T_AA,     'm'|T_AA,     'M'|T_OA,     'm'|T_OA,     
  'M'|T_OBLW,   'm'|T_OBLW,   'N'|T_OA,     'n'|T_OA,     'N'|T_OBLW,   'n'|T_OBLW,   'N'|T_LBLW,   'n'|T_LBLW,   
  'N'|T_XB,     'n'|T_XB,     0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          'P'|T_AA,     'p'|T_AA,     'P'|T_OA,     'p'|T_OA,     'R'|T_OA,     'r'|T_OA,     
  'R'|T_OBLW,   'r'|T_OBLW,   0|0,          0|0,          'R'|T_LBLW,   'r'|T_LBLW,   'S'|T_OA,     's'|T_OA,     
  'S'|T_OBLW,   's'|T_OBLW,   0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  'T'|T_OA,     't'|T_OA,     'T'|T_OBLW,   't'|T_OBLW,   'T'|T_LBLW,   't'|T_LBLW,   'T'|T_XB,     't'|T_XB,     
  'U'|T_DBLW,   'u'|T_DBLW,   'U'|T_TBLW,   'u'|T_TBLW,   'U'|T_XB,     'u'|T_XB,     0|0,          0|0,          
  0|0,          0|0,          'V'|T_TA,     'v'|T_TA,     'V'|T_OBLW,   'v'|T_OBLW,   'W'|T_GA,     'w'|T_GA,     
  'W'|T_AA,     'w'|T_AA,     'W'|T_DA,     'w'|T_DA,     'W'|T_OA,     'w'|T_OA,     'W'|T_OBLW,   'w'|T_OBLW,   
  'X'|T_OA,     'x'|T_OA,     'X'|T_DA,     'x'|T_DA,     'Y'|T_OA,     'y'|T_OA,     'Z'|T_XA,     'z'|T_XA,     
  'Z'|T_OBLW,   'z'|T_OBLW,   'Z'|T_LBLW,   'z'|T_LBLW,   'h'|T_LBLW,   't'|T_DA,     'w'|T_RA,     'y'|T_RA,     
  'a'|T_RHRA,   's'|T_OA,     G_LSL|T_DSM,  0|0,          G_SSU|0,      G_DELL|0,     'A'|T_OBLW,   'a'|T_OBLW,   
  'A'|T_HKAB,   'a'|T_HKAB,   0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          'E'|T_OBLW,   'e'|T_OBLW,   
  'E'|T_HKAB,   'e'|T_HKAB,   'E'|T_TA,     'e'|T_TA,     0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          'I'|T_HKAB,   'i'|T_HKAB,   
  'I'|T_OBLW,   'i'|T_OBLW,   'O'|T_OBLW,   'o'|T_OBLW,   'O'|T_HKAB,   'o'|T_HKAB,   0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          'U'|T_OBLW,   'u'|T_OBLW,   'U'|T_HKAB,   'u'|T_HKAB,   0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  'Y'|T_GA,     'y'|T_GA,     'Y'|T_OBLW,   'y'|T_OBLW,   'Y'|T_HKAB,   'y'|T_HKAB,   'Y'|T_TA,     'y'|T_TA,     
  0|0,          0|0,          G_MVU|0,      G_MVL|0,      0|0,          'y'|0,        };
//______________________________________________________________________________
// 0x00001E00-0x00001EFF: Latin Extended Additional 
int _latinextendedadditional(unsigned int c) {
  if (c<2 || c>255) return NOT_IMPLEMENTED;
  unsigned int index = (c-2);
  unsigned int code  = pgm_read_word(latinextendedadditional_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00002000-0x0000206F "General Punctuation "
// Offsets 2 through 90 are mapped in this block
static const unsigned int generalpunctuation_map[] PROGMEM = {
  ' '|0,        ' '|0,        ' '|0,        ' '|0,        ' '|0,        ' '|0,        ' '|0,        ' '|0,        
  ' '|0,        0|0,          0|0,          0|0,          0|0,          0|0,          '-'|0,        '-'|0,        
  '-'|0,        '-'|0,        G_ED|0,       G_ED|0,       0|0,          0|0,          '\''|0,       '\''|0,       
  ','|0,        '\''|0,       '"'|0,        '"'|0,        ' '|T_DVLB,   '"'|0,        G_DAGG|0,     G_DOUD|0,     
  G_BULL|0,     0|0,          '.'|0,        0|0,          G_HORE|0,     ' '|T_MDU,    0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          G_PMS|0,      0|0,          
  ' '|T_AA,     0|0,          0|0,          '`'|0,        0|0,          0|0,          0|0,          '<'|0,        
  '>'|0,        0|0,          G_DOEM|0,     G_INTE|0,     0|0,          0|0,          0|0,          0|0,          
  0|0,          '-'|0,        0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          G_PILS|T_H5,  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  ':'|0,        };
//______________________________________________________________________________
// 0x00002000-0x0000206F: General Punctuation 
int _generalpunctuation(unsigned int c) {
  if (c<2 || c>90) return NOT_IMPLEMENTED;
  unsigned int index = (c-2);
  unsigned int code  = pgm_read_word(generalpunctuation_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00002070-0x0000209F "Superscripts and Subscripts "
// Offsets 0 through 15 are mapped in this block
static const unsigned int superscriptsandsubscripts_map[] PROGMEM = {
  G_SUP0|0,     G_IL|0,       0|0,          0|0,          G_SUP4|0,     G_SUP5|0,     G_SUP6|0,     G_SUP7|0,     
  G_SUP8|0,     G_SUP9|0,     0|0,          0|0,          0|0,          0|0,          0|0,          G_NL|0,       
  };
//______________________________________________________________________________
// 0x00002070-0x0000209F: Superscripts and Subscripts 
int _superscriptsandsubscripts(unsigned int c) {
  if (c<0 || c>15) return NOT_IMPLEMENTED;
  unsigned int index = (c-0);
  unsigned int code  = pgm_read_word(superscriptsandsubscripts_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x000020A0-0x000020CF "Currency Symbols "
// Offsets 7 through 31 are mapped in this block
static const unsigned int currencysymbols_map[] PROGMEM = {
  G_PESS|0,     0|0,          0|0,          0|0,          0|0,          G_EURS|0,     0|0,          G_TUGS|0,     
  0|0,          0|0,          0|0,          0|0,          G_AUSS|0,     0|0,          0|0,          0|0,          
  0|0,          'T'|T_OBA,    0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  G_BITS|0,     };
//______________________________________________________________________________
// 0x000020A0-0x000020CF: Currency Symbols 
int _currencysymbols(unsigned int c) {
  if (c<7 || c>31) return NOT_IMPLEMENTED;
  unsigned int index = (c-7);
  unsigned int code  = pgm_read_word(currencysymbols_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00002100-0x0000214F "Letterlike Symbols "
// Offsets 2 through 73 are mapped in this block
static const unsigned int letterlikesymbols_map[] PROGMEM = {
  'C'|0,        0|0,          0|0,          0|0,          0|0,          '3'|T_H5,     G_UIU|T_H5,   0|0,          
  'g'|T_ITA,    'H'|0,        'H'|0,        'H'|0,        'h'|0,        'h'|T_SULH,   'I'|0,        'I'|0,        
  'L'|0,        'l'|0,        0|0,          'N'|0,        G_NUMS|0,     0|0,          0|0,          'P'|0,        
  'Q'|0,        'R'|0,        'R'|0,        'R'|0,        'R'|T_KDS,    0|0,          0|0,          0|0,          
  G_TRMS|0,     0|0,          'Z'|0,        0|0,          G_OMEU|0,     G_OMEU|T_VU,  'Z'|0,        0|0,          
  'K'|0,        0|0,          'B'|0,        'C'|0,        'e'|0,        'e'|0,        'E'|0,        'F'|0,        
  'F'|T_TU,     'M'|0,        'o'|0,        0|0,          0|0,          0|0,          0|0,          'i'|0,        
  0|0,          0|0,          0|0,          'y'|0,        G_GAMU|0,     G_PIU|0,      G_ESHU|T_OLN, 'G'|T_TU,     
  'L'|T_TU,     'L'|T_H5,     'Y'|T_VU,     'D'|0,        'd'|0,        'e'|0,        'i'|0,        'j'|0,        
  };
//______________________________________________________________________________
// 0x00002100-0x0000214F: Letterlike Symbols 
int _letterlikesymbols(unsigned int c) {
  if (c<2 || c>73) return NOT_IMPLEMENTED;
  unsigned int index = (c-2);
  unsigned int code  = pgm_read_word(letterlikesymbols_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00002190-0x000021FF "Arrows "
// Offsets 0 through 111 are mapped in this block
static const unsigned int arrows_map[] PROGMEM = {
  G_LEFA|0,     G_TTTT|0,     G_RIGA|0,     G_DOWA|0,     G_LERA|0,     G_ICEL|0,     G_NOWA|0,     G_NOWA|T_H5,  
  G_NOWA|T_TU,  G_NOWA|T_VU,  0|0,          0|0,          G_LEFA|0,     G_RIGA|0,     G_RIGA|0,     G_TTTT|0,     
  G_RIGA|0,     G_DOWA|0,     G_LEFA|0,     G_RIGA|0,     G_LEFA|0,     G_TTTT|0,     G_RIGA|0,     G_DOWA|0,     
  G_UDAW|0,     0|0,          0|0,          0|0,          0|0,          G_LERA|0,     0|0,          G_DOZA|0,     
  G_UAWT|0,     G_UAWT|T_H5,  G_UAWT|T_VU,  G_UAWT|T_TU,  G_RAWC|0,     G_UAWT|T_VU,  G_ATSA|0,     G_ATSA|T_H5,  
  G_NOWA|0,     G_LATB|0,     G_AOCA|0,     G_AOCA|T_H5,  G_LEFA|0,     G_LEFA|0,     G_TTTT|0,     G_TTTT|0,     
  G_RIGA|0,     G_RIGA|0,     G_DOWA|0,     G_DOWA|0,     G_RAOL|0,     0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  G_LEFA|0,     G_TTTT|0,     G_RIGA|0,     G_DOWA|0,     G_LERA|0,     G_ICEL|0,     G_NOWA|0,     G_NOWA|T_H5,  
  G_NOWA|T_TU,  0|0,          G_LEFA|0,     G_RIGA|0,     G_LEFA|0,     G_RIGA|0,     G_TTTT|0,     G_DOWA|0,     
  G_LEFA|0,     G_TTTT|0,     G_LEFA|0,     G_DOWA|0,     G_LEFA|0,     G_RIGA|0,     G_LEFA|0,     G_TTTT|0,     
  G_RIGA|0,     G_DOWA|0,     G_TTTT|0,     G_TTTT|0,     G_TTTT|0,     G_TTTT|0,     G_TTTT|0,     G_TTTT|0,     
  G_RIGA|0,     G_NOWA|0,     G_NOWA|T_TU,  G_ICEL|0,     G_RIGA|0,     0|0,          0|0,          G_LEFA|0,     
  G_RIGA|0,     G_LERA|0,     G_LEFA|0,     G_RIGA|0,     G_LERA|0,     G_LEFA|0,     G_RIGA|0,     G_LERA|0,     
  };
//______________________________________________________________________________
// 0x00002190-0x000021FF: Arrows 
int _arrows(unsigned int c) {
  if (c<0 || c>111) return NOT_IMPLEMENTED;
  unsigned int index = (c-0);
  unsigned int code  = pgm_read_word(arrows_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00002200-0x000022FF "Mathematical Operators "
// !!!! WARNING ⊲ defined as transform T_OLN of ◀,  but ◀ is not available as a base glyph
// Offsets 0 through 255 are mapped in this block
static const unsigned int mathematicaloperators_map[] PROGMEM = {
  'A'|T_VU,     'C'|0,        G_PARD|0,     'E'|T_H5,     0|0,          'o'|T_DSL,    G_DELU|0,     G_DELU|T_VU,  
  G_ELEO|0,     0|0,          G_LUEM|0,     0|0,          0|0,          G_LUEM|T_H6,  G_EOP|0,      G_PIU|0,      
  0|0,          G_ESHU|0,     '-'|0,        0|0,          0|0,          0|0,          0|0,          0|0,          
  G_GUAS|0,     G_BULL|0,     G_SQUR|0,     0|0,          0|0,          0|0,          G_INFI|0,     G_RIG2|0,     
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  'v'|0,        G_ETSB|0,     'U'|0,        0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          ':'|0,        0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  G_ALET|0,     0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  G_NET|0,      G_IDET|0,     0|0,          0|0,          G_LOET|0,     G_GOET|0,     0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          'T'|0,        'T'|T_VU,     0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          G_BLRT|T_OLN, 0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          'v'|0,        'U'|T_VU,     'U'|0,        G_BLAD|T_OLN, ' '|T_MDU,    0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          'E'|0,        
  };
//______________________________________________________________________________
// 0x00002200-0x000022FF: Mathematical Operators 
int _mathematicaloperators(unsigned int c) {
  if (c<0 || c>255) return NOT_IMPLEMENTED;
  unsigned int index = (c-0);
  unsigned int code  = pgm_read_word(mathematicaloperators_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x00002300-0x000023FF "Miscellaneous Technical "
// Offsets 16 through 117 are mapped in this block
static const unsigned int miscellaneoustechnical_map[] PROGMEM = {
  G_NOS|T_H6,   0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  G_THI|0,      G_BOHI|0,     0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          G_OMEL|0,     };
//______________________________________________________________________________
// 0x00002300-0x000023FF: Miscellaneous Technical 
int _miscellaneoustechnical(unsigned int c) {
  if (c<16 || c>117) return NOT_IMPLEMENTED;
  unsigned int index = (c-16);
  unsigned int code  = pgm_read_word(miscellaneoustechnical_map+index);
  return handle_transform(code);
}

////////////////////////////////////////////////////////////////////////////////
// packed data for 0x000025A0-0x000025FF "Geometric Shapes "
// !!!! WARNING ⊲ defined as transform T_OLN of ◀,  but ◀ is not available as a base glyph
// !!!! WARNING ⊲ defined as transform T_OLN of ◀,  but ◀ is not available as a base glyph
// !!!! WARNING ⊲ defined as transform T_OLN of ◀,  but ◀ is not available as a base glyph
// Offsets 0 through 94 are mapped in this block
static const unsigned int geometricshapes_map[] PROGMEM = {
  G_EOP|0,      G_WHIS|0,     0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          G_BLAR|0,     0|0,          0|0,          0|0,          
  0|0,          0|0,          G_BLUT|0,     G_BLUT|0,     G_BLUT|0,     G_BLUT|0,     G_BLRT|0,     G_BLRT|T_OLN, 
  G_BLRT|0,     G_BLRT|T_OLN, G_BLRT|0,     G_BLRT|T_OLN, G_BLUT|T_VU,  G_BLUT|T_VU,  G_BLUT|T_VU,  G_BLUT|T_VU,  
  G_BLRT|T_H5,  0|0,          G_BLRT|T_H5,  0|0,          G_BLRT|T_H5,  0|0,          G_BLAD|0,     G_BLAD|T_OLN, 
  G_BLAD|0,     0|0,          G_LOZE|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     0|0,          G_BLAC|0,     
  G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     0|0,          0|0,          
  G_GUAS|0,     G_BLAC|0,     0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          G_GUAS|0,     0|0,          
  0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          0|0,          G_WHIC|0,     
  0|0,          0|0,          0|0,          0|0,          G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     G_WHIC|0,     
  0|0,          0|0,          0|0,          G_WHIS|0,     G_EOP|0,      G_WHIS|0,     G_EOP|0,      };
//______________________________________________________________________________
// 0x000025A0-0x000025FF: Geometric Shapes 
int _geometricshapes(unsigned int c) {
          if (c>94) return NOT_IMPLEMENTED;
          unsigned int index = c;
          // Special case: Some parts of geometric shapes stores elsewhere
          switch (c) {
            // Semigraphic-like geometric shapes (design to combine)
            case 54: return _symbolsforlegacycomputing(207); // ◖
            case 55: return _symbolsforlegacycomputing(208); // ◗
          }
          // Some stray symbols in the geometric symbols block that should 
          // be interpreted like teletext characters
          if (c>=66 && c<=69) {
            uint8_t color1 = invert? bg : fg;
            uint8_t color2 = invert? fg : bg;
            switch (c) {
              // 1/3 in 1 is slope 1 so 3/3 in one is slope 3
              case 66:  draw_ttxt( 3, 0, color1, color2); break; // ◢
              case 67:  draw_ttxt(-3, 3, color1, color2); break; // ◣
              case 68:  draw_ttxt( 3, 0, color2, color1); break; // ◤
              case 69:  draw_ttxt(-3, 3, color2, color1); break; // ◥
            }
            advance_cursor(1);
            return SUCCESS;
          } 
          unsigned int code  = pgm_read_word(geometricshapes_map+index);
          return handle_transform(code);
        }
        

#endif // FONTMAP
